{
	"name": "Enrollment SQL",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "myspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "23995b7a-1ee8-4ba0-aeee-63e007b759c9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "sql"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/201fa29b-5672-4347-9909-fa57d294b356/resourceGroups/synapsejrs/providers/Microsoft.Synapse/workspaces/synapsejrs/bigDataPools/myspark",
				"name": "myspark",
				"type": "Spark",
				"endpoint": "https://synapsejrs.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/myspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"CREATE OR REPLACE TEMPORARY VIEW vw_TotalACR\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"    a.MeterCategory,\r\n",
					"    a.ACR,\r\n",
					"    a.ACR/ (sum(ACR) over() ) Contribution,\r\n",
					"    SUM(ACR) OVER(order by ACR DESC rows between unbounded preceding and 0 preceding) /  (sum(ACR) over() ) TotalContribution\r\n",
					"FROM\r\n",
					"(\r\n",
					"select \r\n",
					"    MeterCategory, \r\n",
					"    sum(cost) ACR\r\n",
					"from enrollment\r\n",
					"where date BETWEEN '2022-07-01' and '2022-10-03'\r\n",
					"group by MeterCategory\r\n",
					")a\r\n",
					"ORDER BY 2 DESC"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"CREATE OR REPLACE TEMPORARY VIEW vw_AvgDaily\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"    c.date,\r\n",
					"    c.MeterCategory,\r\n",
					"    c.avgDailyCost,\r\n",
					"    (c.avgDailyCost -  c.avgDailyCost2) / c.avgDailyCost2 avgDailyCostGrowth\r\n",
					"FROM\r\n",
					"(\r\n",
					"\r\n",
					"SELECT\r\n",
					"    b.date,\r\n",
					"    b.wk,\r\n",
					"    b.meterCategory,\r\n",
					"    b.avgDailyCost,\r\n",
					"    first_value(b.avgDailyCost) over (partition by b.meterCategory order by b.date) avgDailyCost2\r\n",
					"FROM\r\n",
					"(\r\n",
					"Select \r\n",
					"    min(date) date, \r\n",
					"    weekofyear(a.date) Wk, \r\n",
					"    a.MeterCategory, \r\n",
					"    avg(dailyCost) avgDailyCost\r\n",
					"from\r\n",
					"(\r\n",
					"        SELECT date, MeterCategory, sum(cost) dailyCost\r\n",
					"        from enrollment\r\n",
					"        where \r\n",
					"            date BETWEEN '2022-07-01' and '2022-10-03'\r\n",
					"        group by date, MeterCategory\r\n",
					") a\r\n",
					"group by \r\n",
					"    a.MeterCategory, \r\n",
					"    weekofyear(a.date)\r\n",
					") b\r\n",
					") c\r\n",
					"Where C.date = '2022-10-03'"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"SELECT\r\n",
					"    T.MeterCategory,\r\n",
					"    T.ACR,\r\n",
					"    T.Contribution,\r\n",
					"    T.TotalContribution,\r\n",
					"    D.avgDailyCost,\r\n",
					"    D.avgDailyCostGrowth\r\n",
					"FROM vw_TotalACR T LEFT JOIN vw_AvgDaily D ON T.MeterCategory = D.MeterCategory\r\n",
					"ORDER BY T.TotalContribution"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Select \r\n",
					"    min(date) date, \r\n",
					"    weekofyear(a.date) Wk, \r\n",
					"    a.MeterCategory, \r\n",
					"    avg(dailyCost) avgDailyCost\r\n",
					"from\r\n",
					"(SELECT date, MeterCategory, sum(cost) dailyCost\r\n",
					"from enrollment\r\n",
					"where \r\n",
					"group by date, MeterCategory) a\r\n",
					"where a.date between '2022-07-01' and '2022-10-03'\r\n",
					"group by a.MeterCategory, weekofyear(a.date)\r\n",
					"Order by 1"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"Select min(date) date, weekofyear(a.date) Wk, a.MeterCategory, avg(dailyCost) avgDailyCost\r\n",
					"from\r\n",
					"(SELECT date, MeterCategory, sum(cost) dailyCost\r\n",
					"from enrollment\r\n",
					"where meterCategory in ('Azure App Service','Virtual Machines','Storage','SQL Database','Log Analytics','Azure Databricks','Azure Monitor','Azure API for FHIR','Azure Synapse Analytics','Cognitive Services','Azure Cosmos DB','Sentinel','Service Bus','Application Gateway')\r\n",
					"group by date, MeterCategory) a\r\n",
					"where a.date between '2022-07-01' and '2022-10-03'\r\n",
					"group by a.MeterCategory, weekofyear(a.date)\r\n",
					"Order by 1"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"DROP VIEW if EXISTS avgDailyCostGrowth;\r\n",
					"CREATE Temp VIEW avgDailyCostGrowth\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"    d.date,\r\n",
					"    d.wk,\r\n",
					"    d.meterCategory,\r\n",
					"    d.avgDailyCostGrowth\r\n",
					"FROM\r\n",
					"(\r\n",
					"SELECT\r\n",
					"    c.date,\r\n",
					"    c.wk,\r\n",
					"    c.meterCategory,\r\n",
					"    (c.avgDailyCost -  c.avgDailyCost2) / c.avgDailyCost2 avgDailyCostGrowth\r\n",
					"FROM\r\n",
					"(\r\n",
					"\r\n",
					"SELECT\r\n",
					"    b.date,\r\n",
					"    b.wk,\r\n",
					"    b.meterCategory,\r\n",
					"    b.avgDailyCost,\r\n",
					"    lag(b.avgDailyCost, 1) over (partition by b.meterCategory order by b.date) avgDailyCost2\r\n",
					"FROM\r\n",
					"(\r\n",
					"Select \r\n",
					"    min(date) date, \r\n",
					"    weekofyear(a.date) Wk, \r\n",
					"    a.MeterCategory, \r\n",
					"    avg(dailyCost) avgDailyCost\r\n",
					"from\r\n",
					"(\r\n",
					"        SELECT date, MeterCategory, sum(cost) dailyCost\r\n",
					"        from enrollment\r\n",
					"        where meterCategory in (\"Azure Data Factory v2\")\r\n",
					"        group by date, MeterCategory\r\n",
					") a\r\n",
					"group by \r\n",
					"    a.MeterCategory, \r\n",
					"    weekofyear(a.date)\r\n",
					"having min(date) < \"2022-10-03\"\r\n",
					") b\r\n",
					") c\r\n",
					"WHERE c.avgDailyCost2 IS NOT NULL\r\n",
					") d\r\n",
					"\r\n",
					""
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"select meterCategory\r\n",
					"from avgDailyCostGrowth\r\n",
					"PIVOT (\r\n",
					"    max(avgDailyCostGrowth)\r\n",
					"    FOR date IN (CAST('2022-05-02' AS DATE))\r\n",
					"        --,\t\r\n",
					"    --'2022-05-09',\t'2022-05-16',\t'2022-05-23',\t'2022-05-30',\t'2022-06-06',\t'2022-06-13',\t'2022-06-20',\t'2022-06-27',\t'2022-07-04',\t'2022-07-11',\t'2022-07-18',\t'2022-07-25',\t'2022-08-01',\t'2022-08-08',\t'2022-08-15',\t'2022-08-22',\t'2022-08-29',\t'2022-09-05',\t'2022-09-12',\t'2022-09-19',\t'2022-09-26')\r\n",
					")"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"\r\n",
					"Select min(date) date, weekofyear(a.date) Wk, a.MeterCategory, avg(dailyCost) avgDailyCost\r\n",
					"from\r\n",
					"(SELECT date, MeterCategory, sum(cost) dailyCost\r\n",
					"from enrollment_delta\r\n",
					"where meterCategory in (\"Azure Cosmos DB\")\r\n",
					"group by date, MeterCategory) a\r\n",
					"group by a.MeterCategory, weekofyear(a.date)\r\n",
					"Order by 1"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"select weekofyear(date) wk, avg(cost) avgDailyCost\r\n",
					"FROM\r\n",
					"(\r\n",
					"Select \r\n",
					"    date, sum(Cost) cost\r\n",
					"from enrollment_delta\r\n",
					"where MeterCategory in (\"Azure Synapse Analytics\") \r\n",
					"Group by date\r\n",
					")\r\n",
					"group by weekofyear(date)\r\n",
					"order by 1"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"select weekofyear(date) wk, avg(cost) avgDailyCost\r\n",
					"FROM\r\n",
					"(\r\n",
					"Select \r\n",
					"    date, sum(Cost) cost\r\n",
					"from enrollment_delta\r\n",
					"where MeterCategory in (\"Cognitive Services\") \r\n",
					"Group by date\r\n",
					")\r\n",
					"group by weekofyear(date)\r\n",
					"order by 1"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"CREATE OR REPLACE TEMPORARY VIEW vw_AvgDaily\r\n",
					"AS\r\n",
					"SELECT\r\n",
					"    c.date,\r\n",
					"    c.meterCategory,\r\n",
					"    c.avgDailyCost,\r\n",
					"    (c.avgDailyCost -  c.avgDailyCost2) / c.avgDailyCost2 avgDailyCostGrowth\r\n",
					"FROM\r\n",
					"(\r\n",
					"\r\n",
					"SELECT\r\n",
					"    b.date,\r\n",
					"    b.wk,\r\n",
					"    b.meterCategory,\r\n",
					"    b.avgDailyCost,\r\n",
					"    first_value(b.avgDailyCost) over (partition by b.meterCategory order by b.date) avgDailyCost2\r\n",
					"FROM\r\n",
					"(\r\n",
					"Select \r\n",
					"    min(date) date, \r\n",
					"    weekofyear(a.date) Wk, \r\n",
					"    a.MeterCategory, \r\n",
					"    avg(dailyCost) avgDailyCost\r\n",
					"from\r\n",
					"(\r\n",
					"        SELECT date, MeterCategory, sum(cost) dailyCost\r\n",
					"        from enrollment\r\n",
					"        where \r\n",
					"            date BETWEEN '2022-07-01' and '2022-10-03'\r\n",
					"        group by date, MeterCategory\r\n",
					") a\r\n",
					"group by \r\n",
					"    a.MeterCategory, \r\n",
					"    weekofyear(a.date)\r\n",
					") b\r\n",
					") c\r\n",
					"Where C.date = '2022-10-03'"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"select * from enrollment limit 1"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"SELECT\r\n",
					"    c.date,\r\n",
					"    c.meterCategory,\r\n",
					"    c.avgDailyACR,\r\n",
					"    (c.avgDailyACR -  c.avgDailyACRFirst) / c.avgDailyACRFirst avgDailyACRGrowth\r\n",
					"FROM\r\n",
					"(\r\n",
					"\r\n",
					"SELECT\r\n",
					"    b.date,\r\n",
					"    b.wk,\r\n",
					"    b.meterCategory,\r\n",
					"    b.avgDailyACR,\r\n",
					"    first_value(b.avgDailyACR) over (Partition by meterCategory order by b.date) avgDailyACRFirst\r\n",
					"FROM\r\n",
					"(\r\n",
					"Select \r\n",
					"    min(date) date, \r\n",
					"    meterCategory,\r\n",
					"    weekofyear(a.date) Wk, \r\n",
					"    avg(dailyACR) avgDailyACR\r\n",
					"from\r\n",
					"(\r\n",
					"        SELECT \r\n",
					"        date, \r\n",
					"        meterCategory,\r\n",
					"        sum(cost) dailyACR\r\n",
					"        from enrollment\r\n",
					"        where \r\n",
					"            date BETWEEN '2022-07-01' and '2022-10-03'\r\n",
					"            and SubscriptionName like 'az3-%'\r\n",
					"        group by date, meterCategory\r\n",
					") a\r\n",
					"group by \r\n",
					"    weekofyear(a.date),\r\n",
					"    a.meterCategory\r\n",
					") b\r\n",
					") c\r\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"Select min(date) date, weekofyear(a.date) Wk, a.ResourceGroup, avg(dailyCost) avgDailyCost\r\n",
					"from\r\n",
					"(SELECT date, ResourceGroup, sum(cost) dailyCost\r\n",
					"from enrollment\r\n",
					"where meterCategory in ('Azure Cosmos DB') \r\n",
					"    --and ResourceGroup in ('dha-edna-mlp-nlp-prod-rg','dha-mlp-auto-prod-rg')\r\n",
					"    and \r\n",
					"    ResourceGroup like 'dha-edna-mlp-nlp%' ---prod-rg','dha-mlp-auto-prod-rg')\r\n",
					"group by date, ResourceGroup) a\r\n",
					"where a.date between '2022-07-01' and '2022-10-24'\r\n",
					"group by a.ResourceGroup, weekofyear(a.date)\r\n",
					"Order by 1"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"SELECT min(date) date, month(date) mnth, meterCategory, sum(cost) cost\r\n",
					"from enrollment\r\n",
					"where ResourceGroup like 'dha-edna-mlp-nlp%'\r\n",
					"    and date between '2022-07-01' and '2022-10-24'\r\n",
					"group by month(date), meterCategory\r\n",
					"Order by 1"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"select additionalInfo, Tags\r\n",
					"from enrollment\r\n",
					"where meterCategory in ('Azure Cosmos DB') and ResourceGroup in ('dha-edna-mlp-nlp-prod-rg')\r\n",
					"and date between '2022-09-01' and '2022-10-24'\r\n",
					"limit 100"
				],
				"execution_count": 32
			}
		]
	}
}