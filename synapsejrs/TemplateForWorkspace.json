{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapsejrs"
		},
		"AMLJRS_servicePrincipalKey": {
			"type": "secureString",
			"metadata": "Secure string for 'servicePrincipalKey' of 'AMLJRS'"
		},
		"synapsejrs-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapsejrs-WorkspaceDefaultSqlServer'"
		},
		"AMLJRS_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "201fa29b-5672-4347-9909-fa57d294b356"
		},
		"AMLJRS_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "AML"
		},
		"AMLJRS_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "18d5fc48-1af3-4bad-af27-3f54b1a22f8b"
		},
		"AMLJRS_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47"
		},
		"PartD_Prescriber_PUF_NPI_DRUG_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://download.cms.gov/Research-Statistics-Data-and-Systems/Statistics-Trends-and-Reports/Medicare-Provider-Charge-Data/Downloads/PartD_Prescriber_PUF_NPI_DRUG_@{linkedService().prmYear}.zip"
		},
		"analyticsstoragejrs02_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://analyticsstoragejrs02.dfs.core.windows.net"
		},
		"city_safety_boston_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'city_safety_boston'"
		},
		"nyc_tlc_yellow_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'nyc_tlc_yellow'"
		},
		"synapsejrs-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapselakejrs.dfs.core.windows.net"
		},
		"trgNative_properties_Native_CMS_Part_D_parameters_prmFile": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"trgNative_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/201fa29b-5672-4347-9909-fa57d294b356/resourceGroups/synapsejrs/providers/Microsoft.Storage/storageAccounts/synapselakejrs"
		},
		"trgUncompress_properties_Uncompress_CMS_Part_D_parameters_prmFile": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"trgUncompress_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/201fa29b-5672-4347-9909-fa57d294b356/resourceGroups/synapsejrs/providers/Microsoft.Storage/storageAccounts/synapselakejrs"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Download_CMS_Part_D')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CMSWebsite",
								"type": "DatasetReference",
								"parameters": {
									"prmYear": {
										"value": "@pipeline().parameters.prmYear",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CMSZipped_Part_D",
								"type": "DatasetReference",
								"parameters": {
									"prmFile": {
										"value": "PartD_Prescriber_PUF_NPI_DRUG_@{pipeline().parameters.prmYear}.zip",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"prmYear": {
						"type": "string",
						"defaultValue": "13"
					}
				},
				"folder": {
					"name": "CMS_Part_D"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/CMSWebsite')]",
				"[concat(variables('workspaceId'), '/datasets/CMSZipped_Part_D')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Native_CMS_Part_D')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "nb_Native_CMS_Part_D",
								"type": "NotebookReference"
							},
							"parameters": {
								"prmFileName": {
									"value": {
										"value": "@pipeline().parameters.prmFile",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"prmFile": {
						"type": "string"
					}
				},
				"folder": {
					"name": "CMS_Part_D"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/nb_Native_CMS_Part_D')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "DataflowFiles",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataflowFiles",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DataflowFiles')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Uncompress_CMS_Part_D')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings",
										"preserveZipFileNameAsFolder": false
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CMSUnZipping_Part_D",
								"type": "DatasetReference",
								"parameters": {
									"prmFile": {
										"value": "@pipeline().parameters.prmFile",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CMSUnZipped_Part_D",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"prmFile": {
						"type": "string",
						"defaultValue": "PartD_Prescriber_PUF_NPI_DRUG_13.zip"
					}
				},
				"folder": {
					"name": "CMS_Part_D"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/CMSUnZipping_Part_D')]",
				"[concat(variables('workspaceId'), '/datasets/CMSUnZipped_Part_D')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CMSUnZipped_Part_D')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsejrs-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CMS"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "cms-part-d/raw",
						"fileSystem": "synapselake"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsejrs-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CMSUnZipping_Part_D')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsejrs-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"prmFile": {
						"type": "string",
						"defaultValue": "PartD_Prescriber_PUF_NPI_DRUG_10.zip"
					}
				},
				"folder": {
					"name": "CMS"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().prmFile",
							"type": "Expression"
						},
						"folderPath": "cms-part-d/raw",
						"fileSystem": "synapselake"
					},
					"compression": {
						"type": "ZipDeflate",
						"level": "Fastest"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsejrs-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CMSWebsite')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PartD_Prescriber_PUF_NPI_DRUG",
					"type": "LinkedServiceReference",
					"parameters": {
						"prmYear": {
							"value": "@dataset().prmYear",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"prmYear": {
						"type": "string",
						"defaultValue": "13"
					}
				},
				"folder": {
					"name": "CMS"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/PartD_Prescriber_PUF_NPI_DRUG')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CMSZipped_Part_D')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "synapsejrs-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"prmFile": {
						"type": "string",
						"defaultValue": "PartD_Prescriber_PUF_NPI_DRUG_10.zip"
					}
				},
				"folder": {
					"name": "CMS"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().prmFile",
							"type": "Expression"
						},
						"folderPath": "cms-part-d/raw",
						"fileSystem": "synapselake"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/synapsejrs-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "analyticsstoragejrs02",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "part-00000-b3877c92-bffa-4c90-82fb-5eca661d4022-c000.snappy.parquet",
						"folderPath": "carrierClaims/parquet",
						"fileSystem": "native"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "DESYNPUF_ID",
						"type": "UTF8"
					},
					{
						"name": "CLM_ID",
						"type": "UTF8"
					},
					{
						"name": "CLM_FROM_DT",
						"type": "DATE"
					},
					{
						"name": "CLM_THRU_DT",
						"type": "DATE"
					},
					{
						"name": "ICD9_DGNS_CD_1",
						"type": "UTF8"
					},
					{
						"name": "ICD9_DGNS_CD_2",
						"type": "UTF8"
					},
					{
						"name": "ICD9_DGNS_CD_3",
						"type": "UTF8"
					},
					{
						"name": "ICD9_DGNS_CD_4",
						"type": "UTF8"
					},
					{
						"name": "ICD9_DGNS_CD_5",
						"type": "UTF8"
					},
					{
						"name": "ICD9_DGNS_CD_6",
						"type": "UTF8"
					},
					{
						"name": "ICD9_DGNS_CD_7",
						"type": "UTF8"
					},
					{
						"name": "ICD9_DGNS_CD_8",
						"type": "UTF8"
					},
					{
						"name": "PRF_PHYSN_NPI_1",
						"type": "UTF8"
					},
					{
						"name": "PRF_PHYSN_NPI_2",
						"type": "UTF8"
					},
					{
						"name": "PRF_PHYSN_NPI_3",
						"type": "UTF8"
					},
					{
						"name": "PRF_PHYSN_NPI_4",
						"type": "UTF8"
					},
					{
						"name": "PRF_PHYSN_NPI_5",
						"type": "UTF8"
					},
					{
						"name": "PRF_PHYSN_NPI_6",
						"type": "UTF8"
					},
					{
						"name": "PRF_PHYSN_NPI_7",
						"type": "UTF8"
					},
					{
						"name": "PRF_PHYSN_NPI_8",
						"type": "UTF8"
					},
					{
						"name": "PRF_PHYSN_NPI_9",
						"type": "UTF8"
					},
					{
						"name": "PRF_PHYSN_NPI_10",
						"type": "UTF8"
					},
					{
						"name": "PRF_PHYSN_NPI_11",
						"type": "UTF8"
					},
					{
						"name": "PRF_PHYSN_NPI_12",
						"type": "UTF8"
					},
					{
						"name": "PRF_PHYSN_NPI_13",
						"type": "UTF8"
					},
					{
						"name": "TAX_NUM_1",
						"type": "UTF8"
					},
					{
						"name": "TAX_NUM_2",
						"type": "UTF8"
					},
					{
						"name": "TAX_NUM_3",
						"type": "UTF8"
					},
					{
						"name": "TAX_NUM_4",
						"type": "UTF8"
					},
					{
						"name": "TAX_NUM_5",
						"type": "UTF8"
					},
					{
						"name": "TAX_NUM_6",
						"type": "UTF8"
					},
					{
						"name": "TAX_NUM_7",
						"type": "UTF8"
					},
					{
						"name": "TAX_NUM_8",
						"type": "UTF8"
					},
					{
						"name": "TAX_NUM_9",
						"type": "UTF8"
					},
					{
						"name": "TAX_NUM_10",
						"type": "UTF8"
					},
					{
						"name": "TAX_NUM_11",
						"type": "UTF8"
					},
					{
						"name": "TAX_NUM_12",
						"type": "UTF8"
					},
					{
						"name": "TAX_NUM_13",
						"type": "UTF8"
					},
					{
						"name": "HCPCS_CD_1",
						"type": "UTF8"
					},
					{
						"name": "HCPCS_CD_2",
						"type": "UTF8"
					},
					{
						"name": "HCPCS_CD_3",
						"type": "UTF8"
					},
					{
						"name": "HCPCS_CD_4",
						"type": "UTF8"
					},
					{
						"name": "HCPCS_CD_5",
						"type": "UTF8"
					},
					{
						"name": "HCPCS_CD_6",
						"type": "UTF8"
					},
					{
						"name": "HCPCS_CD_7",
						"type": "UTF8"
					},
					{
						"name": "HCPCS_CD_8",
						"type": "UTF8"
					},
					{
						"name": "HCPCS_CD_9",
						"type": "UTF8"
					},
					{
						"name": "HCPCS_CD_10",
						"type": "UTF8"
					},
					{
						"name": "HCPCS_CD_11",
						"type": "UTF8"
					},
					{
						"name": "HCPCS_CD_12",
						"type": "UTF8"
					},
					{
						"name": "HCPCS_CD_13",
						"type": "UTF8"
					},
					{
						"name": "LINE_NCH_PMT_AMT_1",
						"type": "FLOAT"
					},
					{
						"name": "LINE_NCH_PMT_AMT_2",
						"type": "FLOAT"
					},
					{
						"name": "LINE_NCH_PMT_AMT_3",
						"type": "FLOAT"
					},
					{
						"name": "LINE_NCH_PMT_AMT_4",
						"type": "FLOAT"
					},
					{
						"name": "LINE_NCH_PMT_AMT_5",
						"type": "FLOAT"
					},
					{
						"name": "LINE_NCH_PMT_AMT_6",
						"type": "FLOAT"
					},
					{
						"name": "LINE_NCH_PMT_AMT_7",
						"type": "FLOAT"
					},
					{
						"name": "LINE_NCH_PMT_AMT_8",
						"type": "FLOAT"
					},
					{
						"name": "LINE_NCH_PMT_AMT_9",
						"type": "FLOAT"
					},
					{
						"name": "LINE_NCH_PMT_AMT_10",
						"type": "FLOAT"
					},
					{
						"name": "LINE_NCH_PMT_AMT_11",
						"type": "FLOAT"
					},
					{
						"name": "LINE_NCH_PMT_AMT_12",
						"type": "FLOAT"
					},
					{
						"name": "LINE_NCH_PMT_AMT_13",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PTB_DDCTBL_AMT_1",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PTB_DDCTBL_AMT_2",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PTB_DDCTBL_AMT_3",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PTB_DDCTBL_AMT_4",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PTB_DDCTBL_AMT_5",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PTB_DDCTBL_AMT_6",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PTB_DDCTBL_AMT_7",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PTB_DDCTBL_AMT_8",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PTB_DDCTBL_AMT_9",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PTB_DDCTBL_AMT_10",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PTB_DDCTBL_AMT_11",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PTB_DDCTBL_AMT_12",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PTB_DDCTBL_AMT_13",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PRMRY_PYR_PD_AMT_1",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PRMRY_PYR_PD_AMT_2",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PRMRY_PYR_PD_AMT_3",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PRMRY_PYR_PD_AMT_4",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PRMRY_PYR_PD_AMT_5",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PRMRY_PYR_PD_AMT_6",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PRMRY_PYR_PD_AMT_7",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PRMRY_PYR_PD_AMT_8",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PRMRY_PYR_PD_AMT_9",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PRMRY_PYR_PD_AMT_10",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PRMRY_PYR_PD_AMT_11",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PRMRY_PYR_PD_AMT_12",
						"type": "FLOAT"
					},
					{
						"name": "LINE_BENE_PRMRY_PYR_PD_AMT_13",
						"type": "FLOAT"
					},
					{
						"name": "LINE_COINSRNC_AMT_1",
						"type": "FLOAT"
					},
					{
						"name": "LINE_COINSRNC_AMT_2",
						"type": "FLOAT"
					},
					{
						"name": "LINE_COINSRNC_AMT_3",
						"type": "FLOAT"
					},
					{
						"name": "LINE_COINSRNC_AMT_4",
						"type": "FLOAT"
					},
					{
						"name": "LINE_COINSRNC_AMT_5",
						"type": "FLOAT"
					},
					{
						"name": "LINE_COINSRNC_AMT_6",
						"type": "FLOAT"
					},
					{
						"name": "LINE_COINSRNC_AMT_7",
						"type": "FLOAT"
					},
					{
						"name": "LINE_COINSRNC_AMT_8",
						"type": "FLOAT"
					},
					{
						"name": "LINE_COINSRNC_AMT_9",
						"type": "FLOAT"
					},
					{
						"name": "LINE_COINSRNC_AMT_10",
						"type": "FLOAT"
					},
					{
						"name": "LINE_COINSRNC_AMT_11",
						"type": "FLOAT"
					},
					{
						"name": "LINE_COINSRNC_AMT_12",
						"type": "FLOAT"
					},
					{
						"name": "LINE_COINSRNC_AMT_13",
						"type": "FLOAT"
					},
					{
						"name": "LINE_ALOWD_CHRG_AMT_1",
						"type": "FLOAT"
					},
					{
						"name": "LINE_ALOWD_CHRG_AMT_2",
						"type": "FLOAT"
					},
					{
						"name": "LINE_ALOWD_CHRG_AMT_3",
						"type": "FLOAT"
					},
					{
						"name": "LINE_ALOWD_CHRG_AMT_4",
						"type": "FLOAT"
					},
					{
						"name": "LINE_ALOWD_CHRG_AMT_5",
						"type": "FLOAT"
					},
					{
						"name": "LINE_ALOWD_CHRG_AMT_6",
						"type": "FLOAT"
					},
					{
						"name": "LINE_ALOWD_CHRG_AMT_7",
						"type": "FLOAT"
					},
					{
						"name": "LINE_ALOWD_CHRG_AMT_8",
						"type": "FLOAT"
					},
					{
						"name": "LINE_ALOWD_CHRG_AMT_9",
						"type": "FLOAT"
					},
					{
						"name": "LINE_ALOWD_CHRG_AMT_10",
						"type": "FLOAT"
					},
					{
						"name": "LINE_ALOWD_CHRG_AMT_11",
						"type": "FLOAT"
					},
					{
						"name": "LINE_ALOWD_CHRG_AMT_12",
						"type": "FLOAT"
					},
					{
						"name": "LINE_ALOWD_CHRG_AMT_13",
						"type": "FLOAT"
					},
					{
						"name": "LINE_PRCSG_IND_CD_1",
						"type": "UTF8"
					},
					{
						"name": "LINE_PRCSG_IND_CD_2",
						"type": "UTF8"
					},
					{
						"name": "LINE_PRCSG_IND_CD_3",
						"type": "UTF8"
					},
					{
						"name": "LINE_PRCSG_IND_CD_4",
						"type": "UTF8"
					},
					{
						"name": "LINE_PRCSG_IND_CD_5",
						"type": "UTF8"
					},
					{
						"name": "LINE_PRCSG_IND_CD_6",
						"type": "UTF8"
					},
					{
						"name": "LINE_PRCSG_IND_CD_7",
						"type": "UTF8"
					},
					{
						"name": "LINE_PRCSG_IND_CD_8",
						"type": "UTF8"
					},
					{
						"name": "LINE_PRCSG_IND_CD_9",
						"type": "UTF8"
					},
					{
						"name": "LINE_PRCSG_IND_CD_10",
						"type": "UTF8"
					},
					{
						"name": "LINE_PRCSG_IND_CD_11",
						"type": "UTF8"
					},
					{
						"name": "LINE_PRCSG_IND_CD_12",
						"type": "UTF8"
					},
					{
						"name": "LINE_PRCSG_IND_CD_13",
						"type": "UTF8"
					},
					{
						"name": "LINE_ICD9_DGNS_CD_1",
						"type": "UTF8"
					},
					{
						"name": "LINE_ICD9_DGNS_CD_2",
						"type": "UTF8"
					},
					{
						"name": "LINE_ICD9_DGNS_CD_3",
						"type": "UTF8"
					},
					{
						"name": "LINE_ICD9_DGNS_CD_4",
						"type": "UTF8"
					},
					{
						"name": "LINE_ICD9_DGNS_CD_5",
						"type": "UTF8"
					},
					{
						"name": "LINE_ICD9_DGNS_CD_6",
						"type": "UTF8"
					},
					{
						"name": "LINE_ICD9_DGNS_CD_7",
						"type": "UTF8"
					},
					{
						"name": "LINE_ICD9_DGNS_CD_8",
						"type": "UTF8"
					},
					{
						"name": "LINE_ICD9_DGNS_CD_9",
						"type": "UTF8"
					},
					{
						"name": "LINE_ICD9_DGNS_CD_10",
						"type": "UTF8"
					},
					{
						"name": "LINE_ICD9_DGNS_CD_11",
						"type": "UTF8"
					},
					{
						"name": "LINE_ICD9_DGNS_CD_12",
						"type": "UTF8"
					},
					{
						"name": "LINE_ICD9_DGNS_CD_13",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/analyticsstoragejrs02')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Sync')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "analyticsstoragejrs02",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Test",
						"fileSystem": "native"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/analyticsstoragejrs02')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AMLJRS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureMLService",
				"typeProperties": {
					"subscriptionId": "[parameters('AMLJRS_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('AMLJRS_properties_typeProperties_resourceGroupName')]",
					"mlWorkspaceName": "AMLJRS",
					"servicePrincipalId": "[parameters('AMLJRS_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "SecureString",
						"value": "[parameters('AMLJRS_servicePrincipalKey')]"
					},
					"tenant": "[parameters('AMLJRS_properties_typeProperties_tenant')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PartD_Prescriber_PUF_NPI_DRUG')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"prmYear": {
						"type": "string",
						"defaultValue": "13"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('PartD_Prescriber_PUF_NPI_DRUG_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/analyticsstoragejrs02')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('analyticsstoragejrs02_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/city_safety_boston')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('city_safety_boston_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nyc_tlc_yellow')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('nyc_tlc_yellow_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapsejrs-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapsejrs-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapsejrs-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapsejrs-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/trgNative')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Native_CMS_Part_D",
							"type": "PipelineReference"
						},
						"parameters": {
							"prmFile": "[parameters('trgNative_properties_Native_CMS_Part_D_parameters_prmFile')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/synapselake/blobs/cms-part-d/raw/",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('trgNative_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Native_CMS_Part_D')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/trgUncompress')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Uncompress_CMS_Part_D",
							"type": "PipelineReference"
						},
						"parameters": {
							"prmFile": "[parameters('trgUncompress_properties_Uncompress_CMS_Part_D_parameters_prmFile')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/synapselake/blobs/cms-part-d/raw/",
					"blobPathEndsWith": ".zip",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('trgUncompress_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Uncompress_CMS_Part_D')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ChannelType_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ResellerDeltaSource"
						},
						{
							"name": "TargetChannelType"
						}
					],
					"sinks": [
						{
							"name": "ChannelTypeSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ResellerDeltaSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "SelectReseller"
						},
						{
							"name": "PreSKSelectChannelType"
						},
						{
							"name": "Deduplicated1PreSKSelectChannelType"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "Deduplicated1TargetChannelType"
						},
						{
							"name": "SelectDeduplicated1TargetChannelType"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "FilterInsertChannelType"
						},
						{
							"name": "InsertChannelType"
						},
						{
							"name": "SkChannelType"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetChannelType"
						},
						{
							"name": "DerivedChannelType"
						},
						{
							"name": "PostSkChannelType"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType"
						},
						{
							"name": "FinalChannelType"
						},
						{
							"name": "ChannelType"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerDeltaSource\nsource(output(\n\t\tChannelTypeId as integer,\n\t\tChannelTypeName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'ChannelType',\n\tmanifestType: 'manifest') ~> TargetChannelType\nResellerDeltaSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerDeltaSource\nDeduplicated1ResellerDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nReseller select(mapColumn(\n\t\tBusinessType\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectReseller\nSelectReseller select(mapColumn(\n\t\tChannelTypeName = BusinessType\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectChannelType\nPreSKSelectChannelType aggregate(groupBy(ChannelTypeName),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectChannelType\nDeduplicated1PreSKSelectChannelType select(mapColumn(\n\t\tChannelTypeName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectChannelType\nTargetChannelType aggregate(groupBy(ChannelTypeId),\n\tChannelTypeName = last(ChannelTypeName)) ~> Deduplicated1TargetChannelType\nDeduplicated1TargetChannelType select(mapColumn(\n\t\tChannelTypeName,\n\t\tChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetChannelType\nSelectDeduplicated1TargetChannelType select(mapColumn(\n\t\tTarChannelTypeName = ChannelTypeName,\n\t\tTarChannelTypeId = ChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetChannelType\nSelectDeduplicated1PreSKSelectChannelType, SelectTarSelectDeduplicated1TargetChannelType join(ChannelTypeName === TarChannelTypeName,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetChannelType\nJoinSelectTarSelectDeduplicated1TargetChannelType filter(isNull(TarChannelTypeId)) ~> FilterInsertChannelType\nFilterInsertChannelType select(mapColumn(\n\t\tChannelTypeName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertChannelType\nInsertChannelType keyGenerate(output(Sk_ChannelTypeId as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> SkChannelType\nSelectTarSelectDeduplicated1TargetChannelType aggregate(Max_TarChannelTypeId = max(toInteger(TarChannelTypeId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetChannelType\nAggregatedSelectTarSelectDeduplicated1TargetChannelType derive(Max_TarChannelTypeId = iif(isNull(Max_TarChannelTypeId),0,Max_TarChannelTypeId)) ~> MaxSelectTarSelectDeduplicated1TargetChannelType\nSkChannelType, MaxSelectTarSelectDeduplicated1TargetChannelType join(true() === true(),\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetChannelType\nJoinMaxSelectTarSelectDeduplicated1TargetChannelType derive(ChannelTypeId = Sk_ChannelTypeId + Max_TarChannelTypeId) ~> DerivedChannelType\nDerivedChannelType select(mapColumn(\n\t\tChannelTypeName,\n\t\tChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkChannelType\nJoinSelectTarSelectDeduplicated1TargetChannelType filter(!isNull(TarChannelTypeId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectChannelType\nFilterUpdateSelectDeduplicated1PreSKSelectChannelType select(mapColumn(\n\t\tChannelTypeName,\n\t\tChannelTypeId = TarChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectChannelType\nPostSkChannelType, UpdateSelectDeduplicated1PreSKSelectChannelType union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectChannelType\nUnionUpdateSelectDeduplicated1PreSKSelectChannelType select(mapColumn(\n\t\tTarChannelTypeName = ChannelTypeName,\n\t\tTarChannelTypeId = ChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType\nPreSKSelectChannelType, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType join(ChannelTypeName === TarChannelTypeName,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectChannelType select(mapColumn(\n\t\tChannelTypeName,\n\t\tChannelTypeId = TarChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalChannelType\nFinalChannelType aggregate(groupBy(ChannelTypeId),\n\tChannelTypeName = last(ChannelTypeName)) ~> ChannelType\nChannelType sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'ChannelType',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ChannelTypeSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Channel_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ResellerDeltaSource"
						},
						{
							"name": "SalesSource"
						},
						{
							"name": "SalesTerritorySource"
						},
						{
							"name": "TargetChannelType"
						}
					],
					"sinks": [
						{
							"name": "ChannelSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ResellerDeltaSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "Deduplicated1SalesSource"
						},
						{
							"name": "Sales"
						},
						{
							"name": "JoinSales"
						},
						{
							"name": "Deduplicated1SalesTerritorySource"
						},
						{
							"name": "SalesTerritory"
						},
						{
							"name": "JoinSalesTerritory"
						},
						{
							"name": "SelectJoinSalesTerritory"
						},
						{
							"name": "Deduplicated1TargetChannelType"
						},
						{
							"name": "SelectChannelType"
						},
						{
							"name": "JoinForChannelTypeId"
						},
						{
							"name": "SelectForChannelTypeId"
						},
						{
							"name": "Channel"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerDeltaSource\nsource(output(\n\t\tSalesAmount as decimal(18,2),\n\t\tTotalProductCost as decimal(18,2),\n\t\tProductStandardCost as decimal(18,2),\n\t\tUnitPriceDiscountPct as decimal(18,2),\n\t\tExtendedAmount as decimal(18,2),\n\t\tUnitPrice as decimal(18,2),\n\t\tOrderQuantity as integer,\n\t\tSalesTerritoryKey as integer,\n\t\tShipDateKey as integer,\n\t\tDueDateKey as integer,\n\t\tOrderDateKey as integer,\n\t\tProductKey as integer,\n\t\tCustomerKey as integer,\n\t\tResellerKey as integer,\n\t\tSalesOrderLineKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Sales',\n\tmanifestType: 'manifest') ~> SalesSource\nsource(output(\n\t\tSalesTerritoryKey as integer,\n\t\tRegion as string,\n\t\tCountry as string,\n\t\tGroup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'SalesTerritory',\n\tmanifestType: 'manifest') ~> SalesTerritorySource\nsource(output(\n\t\tChannelTypeId as integer,\n\t\tChannelTypeName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'ChannelType',\n\tmanifestType: 'manifest') ~> TargetChannelType\nResellerDeltaSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerDeltaSource\nDeduplicated1ResellerDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nSalesSource aggregate(groupBy(ProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey),\n\tSalesAmount = last(SalesAmount),\n\t\tTotalProductCost = last(TotalProductCost),\n\t\tProductStandardCost = last(ProductStandardCost),\n\t\tUnitPriceDiscountPct = last(UnitPriceDiscountPct),\n\t\tExtendedAmount = last(ExtendedAmount),\n\t\tUnitPrice = last(UnitPrice),\n\t\tOrderQuantity = last(OrderQuantity),\n\t\tSalesTerritoryKey = last(SalesTerritoryKey),\n\t\tShipDateKey = last(ShipDateKey),\n\t\tDueDateKey = last(DueDateKey),\n\t\tOrderDateKey = last(OrderDateKey)) ~> Deduplicated1SalesSource\nDeduplicated1SalesSource select(mapColumn(\n\t\tSalesAmount,\n\t\tTotalProductCost,\n\t\tProductStandardCost,\n\t\tUnitPriceDiscountPct,\n\t\tExtendedAmount,\n\t\tUnitPrice,\n\t\tOrderQuantity,\n\t\tSalesTerritoryKey,\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Sales\nReseller, Sales join(Reseller@ResellerKey === Sales@ResellerKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSales\nSalesTerritorySource aggregate(groupBy(SalesTerritoryKey),\n\tGroup = last(Group),\n\t\tCountry = last(Country),\n\t\tRegion = last(Region)) ~> Deduplicated1SalesTerritorySource\nDeduplicated1SalesTerritorySource select(mapColumn(\n\t\tGroup,\n\t\tCountry,\n\t\tRegion,\n\t\tSalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SalesTerritory\nJoinSales, SalesTerritory join(Sales@SalesTerritoryKey === SalesTerritory@SalesTerritoryKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSalesTerritory\nJoinSalesTerritory select(mapColumn(\n\t\tBusinessTypeAlias = BusinessType,\n\t\tReseller_ResellerKey_Generated = Reseller@ResellerKey,\n\t\tResellerId,\n\t\tReseller,\n\t\tSalesTerritory_SalesTerritoryKey_Generated = SalesTerritory@SalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectJoinSalesTerritory\nTargetChannelType aggregate(groupBy(ChannelTypeId),\n\tChannelTypeName = last(ChannelTypeName)) ~> Deduplicated1TargetChannelType\nDeduplicated1TargetChannelType select(mapColumn(\n\t\tChannelTypeId,\n\t\tChannelTypeNameAlias = ChannelTypeName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectChannelType\nSelectJoinSalesTerritory, SelectChannelType join(BusinessTypeAlias === ChannelTypeNameAlias,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinForChannelTypeId\nJoinForChannelTypeId select(mapColumn(\n\t\tBusinessTypeAlias,\n\t\tReseller_ResellerKey_Generated,\n\t\tResellerId,\n\t\tReseller,\n\t\tSalesTerritory_SalesTerritoryKey_Generated,\n\t\tChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForChannelTypeId\nSelectForChannelTypeId select(mapColumn(\n\t\tChannelId = Reseller_ResellerKey_Generated,\n\t\tChannelKey = ResellerId,\n\t\tChannelName = Reseller,\n\t\tTerritoryId = SalesTerritory_SalesTerritoryKey_Generated,\n\t\tChannelTypeId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Channel\nChannel sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Channel',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ChannelSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Country2_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ResellerDeltaSource"
						},
						{
							"name": "TargetCountry"
						}
					],
					"sinks": [
						{
							"name": "CountrySink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ResellerDeltaSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "SelectReseller"
						},
						{
							"name": "PreSKSelectCountry"
						},
						{
							"name": "Deduplicated1PreSKSelectCountry"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectDeduplicated1TargetCountry"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "FilterInsertCountry"
						},
						{
							"name": "InsertCountry"
						},
						{
							"name": "SkCountry"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "DerivedCountry"
						},
						{
							"name": "PostSkCountry"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "FinalCountry"
						},
						{
							"name": "Country"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nResellerDeltaSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerDeltaSource\nDeduplicated1ResellerDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nReseller select(mapColumn(\n\t\tCountryRegion\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectReseller\nSelectReseller select(mapColumn(\n\t\tIsoCountryName = CountryRegion\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectCountry\nPreSKSelectCountry aggregate(groupBy(IsoCountryName),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectCountry\nDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectCountry\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetCountry\nSelectDeduplicated1TargetCountry select(mapColumn(\n\t\tTarIsoCountryName = IsoCountryName,\n\t\tTarCountryId = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetCountry\nSelectDeduplicated1PreSKSelectCountry, SelectTarSelectDeduplicated1TargetCountry join(IsoCountryName === TarIsoCountryName,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetCountry\nJoinSelectTarSelectDeduplicated1TargetCountry filter(isNull(TarCountryId)) ~> FilterInsertCountry\nFilterInsertCountry select(mapColumn(\n\t\tIsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertCountry\nInsertCountry keyGenerate(output(Sk_CountryId as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> SkCountry\nSelectTarSelectDeduplicated1TargetCountry aggregate(Max_TarCountryId = max(toInteger(TarCountryId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetCountry\nAggregatedSelectTarSelectDeduplicated1TargetCountry derive(Max_TarCountryId = iif(isNull(Max_TarCountryId),0,Max_TarCountryId)) ~> MaxSelectTarSelectDeduplicated1TargetCountry\nSkCountry, MaxSelectTarSelectDeduplicated1TargetCountry join(true() === true(),\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetCountry\nJoinMaxSelectTarSelectDeduplicated1TargetCountry derive(CountryId = Sk_CountryId + Max_TarCountryId) ~> DerivedCountry\nDerivedCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkCountry\nJoinSelectTarSelectDeduplicated1TargetCountry filter(!isNull(TarCountryId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectCountry\nFilterUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId = TarCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectCountry\nPostSkCountry, UpdateSelectDeduplicated1PreSKSelectCountry union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectCountry\nUnionUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tTarIsoCountryName = IsoCountryName,\n\t\tTarCountryId = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry\nPreSKSelectCountry, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry join(IsoCountryName === TarIsoCountryName,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId = TarCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalCountry\nFinalCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Country\nCountry sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> CountrySink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Country_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "CustomerDataDeltaSource"
						},
						{
							"name": "TargetCountry"
						}
					],
					"sinks": [
						{
							"name": "CountrySink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1CustomerDataDeltaSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "SelectCustomerData"
						},
						{
							"name": "PreSKSelectCountry"
						},
						{
							"name": "Deduplicated1PreSKSelectCountry"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectDeduplicated1TargetCountry"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "FilterInsertCountry"
						},
						{
							"name": "InsertCountry"
						},
						{
							"name": "SkCountry"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetCountry"
						},
						{
							"name": "DerivedCountry"
						},
						{
							"name": "PostSkCountry"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry"
						},
						{
							"name": "FinalCountry"
						},
						{
							"name": "Country"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nCustomerDataDeltaSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataDeltaSource\nDeduplicated1CustomerDataDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nCustomerData select(mapColumn(\n\t\tCountryRegion\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCustomerData\nSelectCustomerData select(mapColumn(\n\t\tIsoCountryName = CountryRegion\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectCountry\nPreSKSelectCountry aggregate(groupBy(IsoCountryName),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectCountry\nDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectCountry\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetCountry\nSelectDeduplicated1TargetCountry select(mapColumn(\n\t\tTarIsoCountryName = IsoCountryName,\n\t\tTarCountryId = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetCountry\nSelectDeduplicated1PreSKSelectCountry, SelectTarSelectDeduplicated1TargetCountry join(IsoCountryName === TarIsoCountryName,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetCountry\nJoinSelectTarSelectDeduplicated1TargetCountry filter(isNull(TarCountryId)) ~> FilterInsertCountry\nFilterInsertCountry select(mapColumn(\n\t\tIsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertCountry\nInsertCountry keyGenerate(output(Sk_CountryId as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> SkCountry\nSelectTarSelectDeduplicated1TargetCountry aggregate(Max_TarCountryId = max(toInteger(TarCountryId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetCountry\nAggregatedSelectTarSelectDeduplicated1TargetCountry derive(Max_TarCountryId = iif(isNull(Max_TarCountryId),0,Max_TarCountryId)) ~> MaxSelectTarSelectDeduplicated1TargetCountry\nSkCountry, MaxSelectTarSelectDeduplicated1TargetCountry join(true() === true(),\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetCountry\nJoinMaxSelectTarSelectDeduplicated1TargetCountry derive(CountryId = Sk_CountryId + Max_TarCountryId) ~> DerivedCountry\nDerivedCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkCountry\nJoinSelectTarSelectDeduplicated1TargetCountry filter(!isNull(TarCountryId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectCountry\nFilterUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId = TarCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectCountry\nPostSkCountry, UpdateSelectDeduplicated1PreSKSelectCountry union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectCountry\nUnionUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tTarIsoCountryName = IsoCountryName,\n\t\tTarCountryId = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry\nPreSKSelectCountry, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry join(IsoCountryName === TarIsoCountryName,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectCountry select(mapColumn(\n\t\tIsoCountryName,\n\t\tCountryId = TarCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalCountry\nFinalCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Country\nCountry sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> CountrySink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Customer_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "CustomerDataDeltaSource"
						},
						{
							"name": "TargetCountry"
						},
						{
							"name": "TargetLocation"
						}
					],
					"sinks": [
						{
							"name": "CustomerSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1CustomerDataDeltaSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "SelectCustomerData"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectCountry"
						},
						{
							"name": "JoinForCountryIdLookupFunction"
						},
						{
							"name": "SelectForCountryIdLookupFunction"
						},
						{
							"name": "Deduplicated1TargetLocation"
						},
						{
							"name": "SelectLocation"
						},
						{
							"name": "JoinForLocationId"
						},
						{
							"name": "SelectForLocationId"
						},
						{
							"name": "Customer"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nsource(output(\n\t\tLocationId as integer,\n\t\tLocationCity as string,\n\t\tLocationState as string,\n\t\tCountryId as integer,\n\t\tLocationZip as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tmanifestType: 'manifest') ~> TargetLocation\nCustomerDataDeltaSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataDeltaSource\nDeduplicated1CustomerDataDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nCustomerData select(mapColumn(\n\t\tPostalCodeAlias = PostalCode,\n\t\tStateProvinceAlias = StateProvince,\n\t\tCityAlias = City,\n\t\tCountryRegionAlias = CountryRegion,\n\t\tCustomerId,\n\t\tCustomerData_CustomerKey_Generated = CustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCustomerData\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tCountryIdLookupFunction = CountryId,\n\t\tIsoCountryNameAlias = IsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCountry\nSelectCustomerData, SelectCountry join(CountryRegionAlias === IsoCountryNameAlias,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinForCountryIdLookupFunction\nJoinForCountryIdLookupFunction select(mapColumn(\n\t\tPostalCodeAlias,\n\t\tStateProvinceAlias,\n\t\tCityAlias,\n\t\tCountryRegionAlias,\n\t\tCustomerId,\n\t\tCustomerData_CustomerKey_Generated,\n\t\tCountryIdLookupFunction\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForCountryIdLookupFunction\nTargetLocation aggregate(groupBy(LocationId),\n\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId),\n\t\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState)) ~> Deduplicated1TargetLocation\nDeduplicated1TargetLocation select(mapColumn(\n\t\tLocationId,\n\t\tLocationZipAlias = LocationZip,\n\t\tLocationStateAlias = LocationState,\n\t\tLocationCityAlias = LocationCity,\n\t\tCountryIdAlias = CountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectLocation\nSelectForCountryIdLookupFunction, SelectLocation join(PostalCodeAlias === LocationZipAlias\n\t&& StateProvinceAlias === LocationStateAlias\n\t&& CityAlias === LocationCityAlias\n\t&& CountryIdLookupFunction === CountryIdAlias,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinForLocationId\nJoinForLocationId select(mapColumn(\n\t\tPostalCodeAlias,\n\t\tStateProvinceAlias,\n\t\tCityAlias,\n\t\tCountryRegionAlias,\n\t\tCustomerId,\n\t\tCustomerData_CustomerKey_Generated,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForLocationId\nSelectForLocationId select(mapColumn(\n\t\tLocationId,\n\t\tCustomerKey = CustomerId,\n\t\tCustomerId = CustomerData_CustomerKey_Generated\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Customer\nCustomer sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Customer',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> CustomerSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowFiles')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Sync",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tDESYNPUF_ID as string,\n\t\tCLM_ID as string,\n\t\tCLM_FROM_DT as date,\n\t\tCLM_THRU_DT as date,\n\t\tICD9_DGNS_CD_1 as string,\n\t\tICD9_DGNS_CD_2 as string,\n\t\tICD9_DGNS_CD_3 as string,\n\t\tICD9_DGNS_CD_4 as string,\n\t\tICD9_DGNS_CD_5 as string,\n\t\tICD9_DGNS_CD_6 as string,\n\t\tICD9_DGNS_CD_7 as string,\n\t\tICD9_DGNS_CD_8 as string,\n\t\tPRF_PHYSN_NPI_1 as string,\n\t\tPRF_PHYSN_NPI_2 as string,\n\t\tPRF_PHYSN_NPI_3 as string,\n\t\tPRF_PHYSN_NPI_4 as string,\n\t\tPRF_PHYSN_NPI_5 as string,\n\t\tPRF_PHYSN_NPI_6 as string,\n\t\tPRF_PHYSN_NPI_7 as string,\n\t\tPRF_PHYSN_NPI_8 as string,\n\t\tPRF_PHYSN_NPI_9 as string,\n\t\tPRF_PHYSN_NPI_10 as string,\n\t\tPRF_PHYSN_NPI_11 as string,\n\t\tPRF_PHYSN_NPI_12 as string,\n\t\tPRF_PHYSN_NPI_13 as string,\n\t\tTAX_NUM_1 as string,\n\t\tTAX_NUM_2 as string,\n\t\tTAX_NUM_3 as string,\n\t\tTAX_NUM_4 as string,\n\t\tTAX_NUM_5 as string,\n\t\tTAX_NUM_6 as string,\n\t\tTAX_NUM_7 as string,\n\t\tTAX_NUM_8 as string,\n\t\tTAX_NUM_9 as string,\n\t\tTAX_NUM_10 as string,\n\t\tTAX_NUM_11 as string,\n\t\tTAX_NUM_12 as string,\n\t\tTAX_NUM_13 as string,\n\t\tHCPCS_CD_1 as string,\n\t\tHCPCS_CD_2 as string,\n\t\tHCPCS_CD_3 as string,\n\t\tHCPCS_CD_4 as string,\n\t\tHCPCS_CD_5 as string,\n\t\tHCPCS_CD_6 as string,\n\t\tHCPCS_CD_7 as string,\n\t\tHCPCS_CD_8 as string,\n\t\tHCPCS_CD_9 as string,\n\t\tHCPCS_CD_10 as string,\n\t\tHCPCS_CD_11 as string,\n\t\tHCPCS_CD_12 as string,\n\t\tHCPCS_CD_13 as string,\n\t\tLINE_NCH_PMT_AMT_1 as float,\n\t\tLINE_NCH_PMT_AMT_2 as float,\n\t\tLINE_NCH_PMT_AMT_3 as float,\n\t\tLINE_NCH_PMT_AMT_4 as float,\n\t\tLINE_NCH_PMT_AMT_5 as float,\n\t\tLINE_NCH_PMT_AMT_6 as float,\n\t\tLINE_NCH_PMT_AMT_7 as float,\n\t\tLINE_NCH_PMT_AMT_8 as float,\n\t\tLINE_NCH_PMT_AMT_9 as float,\n\t\tLINE_NCH_PMT_AMT_10 as float,\n\t\tLINE_NCH_PMT_AMT_11 as float,\n\t\tLINE_NCH_PMT_AMT_12 as float,\n\t\tLINE_NCH_PMT_AMT_13 as float,\n\t\tLINE_BENE_PTB_DDCTBL_AMT_1 as float,\n\t\tLINE_BENE_PTB_DDCTBL_AMT_2 as float,\n\t\tLINE_BENE_PTB_DDCTBL_AMT_3 as float,\n\t\tLINE_BENE_PTB_DDCTBL_AMT_4 as float,\n\t\tLINE_BENE_PTB_DDCTBL_AMT_5 as float,\n\t\tLINE_BENE_PTB_DDCTBL_AMT_6 as float,\n\t\tLINE_BENE_PTB_DDCTBL_AMT_7 as float,\n\t\tLINE_BENE_PTB_DDCTBL_AMT_8 as float,\n\t\tLINE_BENE_PTB_DDCTBL_AMT_9 as float,\n\t\tLINE_BENE_PTB_DDCTBL_AMT_10 as float,\n\t\tLINE_BENE_PTB_DDCTBL_AMT_11 as float,\n\t\tLINE_BENE_PTB_DDCTBL_AMT_12 as float,\n\t\tLINE_BENE_PTB_DDCTBL_AMT_13 as float,\n\t\tLINE_BENE_PRMRY_PYR_PD_AMT_1 as float,\n\t\tLINE_BENE_PRMRY_PYR_PD_AMT_2 as float,\n\t\tLINE_BENE_PRMRY_PYR_PD_AMT_3 as float,\n\t\tLINE_BENE_PRMRY_PYR_PD_AMT_4 as float,\n\t\tLINE_BENE_PRMRY_PYR_PD_AMT_5 as float,\n\t\tLINE_BENE_PRMRY_PYR_PD_AMT_6 as float,\n\t\tLINE_BENE_PRMRY_PYR_PD_AMT_7 as float,\n\t\tLINE_BENE_PRMRY_PYR_PD_AMT_8 as float,\n\t\tLINE_BENE_PRMRY_PYR_PD_AMT_9 as float,\n\t\tLINE_BENE_PRMRY_PYR_PD_AMT_10 as float,\n\t\tLINE_BENE_PRMRY_PYR_PD_AMT_11 as float,\n\t\tLINE_BENE_PRMRY_PYR_PD_AMT_12 as float,\n\t\tLINE_BENE_PRMRY_PYR_PD_AMT_13 as float,\n\t\tLINE_COINSRNC_AMT_1 as float,\n\t\tLINE_COINSRNC_AMT_2 as float,\n\t\tLINE_COINSRNC_AMT_3 as float,\n\t\tLINE_COINSRNC_AMT_4 as float,\n\t\tLINE_COINSRNC_AMT_5 as float,\n\t\tLINE_COINSRNC_AMT_6 as float,\n\t\tLINE_COINSRNC_AMT_7 as float,\n\t\tLINE_COINSRNC_AMT_8 as float,\n\t\tLINE_COINSRNC_AMT_9 as float,\n\t\tLINE_COINSRNC_AMT_10 as float,\n\t\tLINE_COINSRNC_AMT_11 as float,\n\t\tLINE_COINSRNC_AMT_12 as float,\n\t\tLINE_COINSRNC_AMT_13 as float,\n\t\tLINE_ALOWD_CHRG_AMT_1 as float,\n\t\tLINE_ALOWD_CHRG_AMT_2 as float,\n\t\tLINE_ALOWD_CHRG_AMT_3 as float,\n\t\tLINE_ALOWD_CHRG_AMT_4 as float,\n\t\tLINE_ALOWD_CHRG_AMT_5 as float,\n\t\tLINE_ALOWD_CHRG_AMT_6 as float,\n\t\tLINE_ALOWD_CHRG_AMT_7 as float,\n\t\tLINE_ALOWD_CHRG_AMT_8 as float,\n\t\tLINE_ALOWD_CHRG_AMT_9 as float,\n\t\tLINE_ALOWD_CHRG_AMT_10 as float,\n\t\tLINE_ALOWD_CHRG_AMT_11 as float,\n\t\tLINE_ALOWD_CHRG_AMT_12 as float,\n\t\tLINE_ALOWD_CHRG_AMT_13 as float,\n\t\tLINE_PRCSG_IND_CD_1 as string,\n\t\tLINE_PRCSG_IND_CD_2 as string,\n\t\tLINE_PRCSG_IND_CD_3 as string,\n\t\tLINE_PRCSG_IND_CD_4 as string,\n\t\tLINE_PRCSG_IND_CD_5 as string,\n\t\tLINE_PRCSG_IND_CD_6 as string,\n\t\tLINE_PRCSG_IND_CD_7 as string,\n\t\tLINE_PRCSG_IND_CD_8 as string,\n\t\tLINE_PRCSG_IND_CD_9 as string,\n\t\tLINE_PRCSG_IND_CD_10 as string,\n\t\tLINE_PRCSG_IND_CD_11 as string,\n\t\tLINE_PRCSG_IND_CD_12 as string,\n\t\tLINE_PRCSG_IND_CD_13 as string,\n\t\tLINE_ICD9_DGNS_CD_1 as string,\n\t\tLINE_ICD9_DGNS_CD_2 as string,\n\t\tLINE_ICD9_DGNS_CD_3 as string,\n\t\tLINE_ICD9_DGNS_CD_4 as string,\n\t\tLINE_ICD9_DGNS_CD_5 as string,\n\t\tLINE_ICD9_DGNS_CD_6 as string,\n\t\tLINE_ICD9_DGNS_CD_7 as string,\n\t\tLINE_ICD9_DGNS_CD_8 as string,\n\t\tLINE_ICD9_DGNS_CD_9 as string,\n\t\tLINE_ICD9_DGNS_CD_10 as string,\n\t\tLINE_ICD9_DGNS_CD_11 as string,\n\t\tLINE_ICD9_DGNS_CD_12 as string,\n\t\tLINE_ICD9_DGNS_CD_13 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> source1\nFilter1 derive(fileName = \"test/\" + DESYNPUF_ID + \".snappy.parquet\") ~> DerivedColumn1\nsource1 filter(ICD9_DGNS_CD_1=='1179') ~> Filter1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\trowUrlColumn:'fileName',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Dataset')]",
				"[concat(variables('workspaceId'), '/datasets/Sync')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Item_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ProductDataDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "ItemSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ProductDataDeltaSource"
						},
						{
							"name": "ProductData"
						},
						{
							"name": "SelectProductData"
						},
						{
							"name": "Item"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCategory as string,\n\t\tSubcategory as string,\n\t\tModel as string,\n\t\tListPrice as decimal(18,2),\n\t\tColor as string,\n\t\tStandardCost as decimal(18,2),\n\t\tProduct as string,\n\t\tSKU as string,\n\t\tProductKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'ProductData',\n\tmanifestType: 'manifest') ~> ProductDataDeltaSource\nProductDataDeltaSource aggregate(groupBy(ProductKey),\n\tCategory = last(Category),\n\t\tSubcategory = last(Subcategory),\n\t\tModel = last(Model),\n\t\tListPrice = last(ListPrice),\n\t\tColor = last(Color),\n\t\tStandardCost = last(StandardCost),\n\t\tProduct = last(Product),\n\t\tSKU = last(SKU)) ~> Deduplicated1ProductDataDeltaSource\nDeduplicated1ProductDataDeltaSource select(mapColumn(\n\t\tCategory,\n\t\tSubcategory,\n\t\tModel,\n\t\tListPrice,\n\t\tColor,\n\t\tStandardCost,\n\t\tProduct,\n\t\tSKU,\n\t\tProductKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ProductData\nProductData select(mapColumn(\n\t\tSKU,\n\t\tStandardCost,\n\t\tListPrice\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectProductData\nSelectProductData select(mapColumn(\n\t\tItemSku = SKU,\n\t\tStandardCost,\n\t\tListPrice\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Item\nItem sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Item',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ItemSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Location2_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ResellerDeltaSource"
						},
						{
							"name": "TargetCountry"
						},
						{
							"name": "TargetLocation"
						}
					],
					"sinks": [
						{
							"name": "LocationSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ResellerDeltaSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "SelectReseller"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectCountry"
						},
						{
							"name": "JoinForCountryId"
						},
						{
							"name": "SelectForCountryId"
						},
						{
							"name": "PreSKSelectLocation"
						},
						{
							"name": "Deduplicated1PreSKSelectLocation"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "Deduplicated1TargetLocation"
						},
						{
							"name": "SelectDeduplicated1TargetLocation"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "FilterInsertLocation"
						},
						{
							"name": "InsertLocation"
						},
						{
							"name": "SkLocation"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "DerivedLocation"
						},
						{
							"name": "PostSkLocation"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "FinalLocation"
						},
						{
							"name": "Location"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nsource(output(\n\t\tLocationId as integer,\n\t\tLocationCity as string,\n\t\tLocationState as string,\n\t\tCountryId as integer,\n\t\tLocationZip as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tmanifestType: 'manifest') ~> TargetLocation\nResellerDeltaSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerDeltaSource\nDeduplicated1ResellerDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nReseller select(mapColumn(\n\t\tCountryRegionAlias = CountryRegion,\n\t\tPostalCode,\n\t\tStateProvince,\n\t\tCity\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectReseller\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tCountryId,\n\t\tIsoCountryNameAlias = IsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCountry\nSelectReseller, SelectCountry join(CountryRegionAlias === IsoCountryNameAlias,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinForCountryId\nJoinForCountryId select(mapColumn(\n\t\tCountryRegionAlias,\n\t\tPostalCode,\n\t\tStateProvince,\n\t\tCity,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForCountryId\nSelectForCountryId select(mapColumn(\n\t\tLocationZip = PostalCode,\n\t\tLocationState = StateProvince,\n\t\tLocationCity = City,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectLocation\nPreSKSelectLocation aggregate(groupBy(LocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectLocation\nDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectLocation\nTargetLocation aggregate(groupBy(LocationId),\n\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState),\n\t\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId)) ~> Deduplicated1TargetLocation\nDeduplicated1TargetLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetLocation\nSelectDeduplicated1TargetLocation select(mapColumn(\n\t\tTarLocationCity = LocationCity,\n\t\tTarLocationState = LocationState,\n\t\tTarCountryId = CountryId,\n\t\tTarLocationZip = LocationZip,\n\t\tTarLocationId = LocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetLocation\nSelectDeduplicated1PreSKSelectLocation, SelectTarSelectDeduplicated1TargetLocation join(LocationCity === TarLocationCity\n\t&& LocationState === TarLocationState\n\t&& CountryId === TarCountryId\n\t&& LocationZip === TarLocationZip,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetLocation\nJoinSelectTarSelectDeduplicated1TargetLocation filter(isNull(TarLocationId)) ~> FilterInsertLocation\nFilterInsertLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertLocation\nInsertLocation keyGenerate(output(Sk_LocationId as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> SkLocation\nSelectTarSelectDeduplicated1TargetLocation aggregate(Max_TarLocationId = max(toInteger(TarLocationId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetLocation\nAggregatedSelectTarSelectDeduplicated1TargetLocation derive(Max_TarLocationId = iif(isNull(Max_TarLocationId),0,Max_TarLocationId)) ~> MaxSelectTarSelectDeduplicated1TargetLocation\nSkLocation, MaxSelectTarSelectDeduplicated1TargetLocation join(true() === true(),\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetLocation\nJoinMaxSelectTarSelectDeduplicated1TargetLocation derive(LocationId = Sk_LocationId + Max_TarLocationId) ~> DerivedLocation\nDerivedLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkLocation\nJoinSelectTarSelectDeduplicated1TargetLocation filter(!isNull(TarLocationId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectLocation\nFilterUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId = TarLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectLocation\nPostSkLocation, UpdateSelectDeduplicated1PreSKSelectLocation union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectLocation\nUnionUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tTarLocationCity = LocationCity,\n\t\tTarLocationState = LocationState,\n\t\tTarCountryId = CountryId,\n\t\tTarLocationZip = LocationZip,\n\t\tTarLocationId = LocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation\nPreSKSelectLocation, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation join(LocationCity === TarLocationCity\n\t&& LocationState === TarLocationState\n\t&& CountryId === TarCountryId\n\t&& LocationZip === TarLocationZip,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationZip,\n\t\tLocationState,\n\t\tLocationCity,\n\t\tCountryId,\n\t\tLocationId = TarLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalLocation\nFinalLocation aggregate(groupBy(LocationId),\n\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState),\n\t\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId)) ~> Location\nLocation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> LocationSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Location_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "CustomerDataDeltaSource"
						},
						{
							"name": "TargetCountry"
						},
						{
							"name": "TargetLocation"
						}
					],
					"sinks": [
						{
							"name": "LocationSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1CustomerDataDeltaSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "SelectCustomerData"
						},
						{
							"name": "Deduplicated1TargetCountry"
						},
						{
							"name": "SelectCountry"
						},
						{
							"name": "JoinForCountryId"
						},
						{
							"name": "SelectForCountryId"
						},
						{
							"name": "PreSKSelectLocation"
						},
						{
							"name": "Deduplicated1PreSKSelectLocation"
						},
						{
							"name": "SelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "Deduplicated1TargetLocation"
						},
						{
							"name": "SelectDeduplicated1TargetLocation"
						},
						{
							"name": "SelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "JoinSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "FilterInsertLocation"
						},
						{
							"name": "InsertLocation"
						},
						{
							"name": "SkLocation"
						},
						{
							"name": "AggregatedSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "MaxSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "JoinMaxSelectTarSelectDeduplicated1TargetLocation"
						},
						{
							"name": "DerivedLocation"
						},
						{
							"name": "PostSkLocation"
						},
						{
							"name": "FilterUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "UpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "UnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation"
						},
						{
							"name": "FinalLocation"
						},
						{
							"name": "Location"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataDeltaSource\nsource(output(\n\t\tCountryId as integer,\n\t\tIsoCountryName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Country',\n\tmanifestType: 'manifest') ~> TargetCountry\nsource(output(\n\t\tLocationId as integer,\n\t\tLocationCity as string,\n\t\tLocationState as string,\n\t\tCountryId as integer,\n\t\tLocationZip as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tmanifestType: 'manifest') ~> TargetLocation\nCustomerDataDeltaSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataDeltaSource\nDeduplicated1CustomerDataDeltaSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nCustomerData select(mapColumn(\n\t\tCountryRegionAlias = CountryRegion,\n\t\tPostalCode,\n\t\tStateProvince,\n\t\tCity\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCustomerData\nTargetCountry aggregate(groupBy(CountryId),\n\tIsoCountryName = last(IsoCountryName)) ~> Deduplicated1TargetCountry\nDeduplicated1TargetCountry select(mapColumn(\n\t\tCountryId,\n\t\tIsoCountryNameAlias = IsoCountryName\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCountry\nSelectCustomerData, SelectCountry join(CountryRegionAlias === IsoCountryNameAlias,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinForCountryId\nJoinForCountryId select(mapColumn(\n\t\tCountryRegionAlias,\n\t\tPostalCode,\n\t\tStateProvince,\n\t\tCity,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectForCountryId\nSelectForCountryId select(mapColumn(\n\t\tLocationZip = PostalCode,\n\t\tLocationState = StateProvince,\n\t\tLocationCity = City,\n\t\tCountryId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PreSKSelectLocation\nPreSKSelectLocation aggregate(groupBy(LocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip),\n\tCount = count(1)) ~> Deduplicated1PreSKSelectLocation\nDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1PreSKSelectLocation\nTargetLocation aggregate(groupBy(LocationId),\n\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState),\n\t\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId)) ~> Deduplicated1TargetLocation\nDeduplicated1TargetLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDeduplicated1TargetLocation\nSelectDeduplicated1TargetLocation select(mapColumn(\n\t\tTarLocationCity = LocationCity,\n\t\tTarLocationState = LocationState,\n\t\tTarCountryId = CountryId,\n\t\tTarLocationZip = LocationZip,\n\t\tTarLocationId = LocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarSelectDeduplicated1TargetLocation\nSelectDeduplicated1PreSKSelectLocation, SelectTarSelectDeduplicated1TargetLocation join(LocationCity === TarLocationCity\n\t&& LocationState === TarLocationState\n\t&& CountryId === TarCountryId\n\t&& LocationZip === TarLocationZip,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarSelectDeduplicated1TargetLocation\nJoinSelectTarSelectDeduplicated1TargetLocation filter(isNull(TarLocationId)) ~> FilterInsertLocation\nFilterInsertLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> InsertLocation\nInsertLocation keyGenerate(output(Sk_LocationId as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> SkLocation\nSelectTarSelectDeduplicated1TargetLocation aggregate(Max_TarLocationId = max(toInteger(TarLocationId)) + 0) ~> AggregatedSelectTarSelectDeduplicated1TargetLocation\nAggregatedSelectTarSelectDeduplicated1TargetLocation derive(Max_TarLocationId = iif(isNull(Max_TarLocationId),0,Max_TarLocationId)) ~> MaxSelectTarSelectDeduplicated1TargetLocation\nSkLocation, MaxSelectTarSelectDeduplicated1TargetLocation join(true() === true(),\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinMaxSelectTarSelectDeduplicated1TargetLocation\nJoinMaxSelectTarSelectDeduplicated1TargetLocation derive(LocationId = Sk_LocationId + Max_TarLocationId) ~> DerivedLocation\nDerivedLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PostSkLocation\nJoinSelectTarSelectDeduplicated1TargetLocation filter(!isNull(TarLocationId)) ~> FilterUpdateSelectDeduplicated1PreSKSelectLocation\nFilterUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationCity,\n\t\tLocationState,\n\t\tCountryId,\n\t\tLocationZip,\n\t\tLocationId = TarLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UpdateSelectDeduplicated1PreSKSelectLocation\nPostSkLocation, UpdateSelectDeduplicated1PreSKSelectLocation union(byName: true)~> UnionUpdateSelectDeduplicated1PreSKSelectLocation\nUnionUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tTarLocationCity = LocationCity,\n\t\tTarLocationState = LocationState,\n\t\tTarCountryId = CountryId,\n\t\tTarLocationZip = LocationZip,\n\t\tTarLocationId = LocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation\nPreSKSelectLocation, SelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation join(LocationCity === TarLocationCity\n\t&& LocationState === TarLocationState\n\t&& CountryId === TarCountryId\n\t&& LocationZip === TarLocationZip,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation\nJoinSelectTarUnionUpdateSelectDeduplicated1PreSKSelectLocation select(mapColumn(\n\t\tLocationZip,\n\t\tLocationState,\n\t\tLocationCity,\n\t\tCountryId,\n\t\tLocationId = TarLocationId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FinalLocation\nFinalLocation aggregate(groupBy(LocationId),\n\tLocationZip = last(LocationZip),\n\t\tLocationState = last(LocationState),\n\t\tLocationCity = last(LocationCity),\n\t\tCountryId = last(CountryId)) ~> Location\nLocation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Location',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> LocationSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ProductCategoryDim_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ProductDataDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "ProductCategoryDimSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ProductDataDeltaSource"
						},
						{
							"name": "ProductData"
						},
						{
							"name": "SelectProductData"
						},
						{
							"name": "ProductCategoryDim"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCategory as string,\n\t\tSubcategory as string,\n\t\tModel as string,\n\t\tListPrice as decimal(18,2),\n\t\tColor as string,\n\t\tStandardCost as decimal(18,2),\n\t\tProduct as string,\n\t\tSKU as string,\n\t\tProductKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'ProductData',\n\tmanifestType: 'manifest') ~> ProductDataDeltaSource\nProductDataDeltaSource aggregate(groupBy(ProductKey),\n\tCategory = last(Category),\n\t\tSubcategory = last(Subcategory),\n\t\tModel = last(Model),\n\t\tListPrice = last(ListPrice),\n\t\tColor = last(Color),\n\t\tStandardCost = last(StandardCost),\n\t\tProduct = last(Product),\n\t\tSKU = last(SKU)) ~> Deduplicated1ProductDataDeltaSource\nDeduplicated1ProductDataDeltaSource select(mapColumn(\n\t\tCategory,\n\t\tSubcategory,\n\t\tModel,\n\t\tListPrice,\n\t\tColor,\n\t\tStandardCost,\n\t\tProduct,\n\t\tSKU,\n\t\tProductKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ProductData\nProductData select(mapColumn(\n\t\tProductKey,\n\t\tModel,\n\t\tSubcategory,\n\t\tCategory\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectProductData\nSelectProductData select(mapColumn(\n\t\tProductId = ProductKey,\n\t\tModel,\n\t\tSubCategory = Subcategory,\n\t\tCategory\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ProductCategoryDim\nProductCategoryDim sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'ProductCategoryDim',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ProductCategoryDimSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Product_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "ProductDataDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "ProductSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1ProductDataDeltaSource"
						},
						{
							"name": "ProductData"
						},
						{
							"name": "SelectProductData"
						},
						{
							"name": "Product"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tCategory as string,\n\t\tSubcategory as string,\n\t\tModel as string,\n\t\tListPrice as decimal(18,2),\n\t\tColor as string,\n\t\tStandardCost as decimal(18,2),\n\t\tProduct as string,\n\t\tSKU as string,\n\t\tProductKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'ProductData',\n\tmanifestType: 'manifest') ~> ProductDataDeltaSource\nProductDataDeltaSource aggregate(groupBy(ProductKey),\n\tCategory = last(Category),\n\t\tSubcategory = last(Subcategory),\n\t\tModel = last(Model),\n\t\tListPrice = last(ListPrice),\n\t\tColor = last(Color),\n\t\tStandardCost = last(StandardCost),\n\t\tProduct = last(Product),\n\t\tSKU = last(SKU)) ~> Deduplicated1ProductDataDeltaSource\nDeduplicated1ProductDataDeltaSource select(mapColumn(\n\t\tCategory,\n\t\tSubcategory,\n\t\tModel,\n\t\tListPrice,\n\t\tColor,\n\t\tStandardCost,\n\t\tProduct,\n\t\tSKU,\n\t\tProductKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> ProductData\nProductData select(mapColumn(\n\t\tProductKey,\n\t\tSKU,\n\t\tProduct,\n\t\tColor\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectProductData\nSelectProductData select(mapColumn(\n\t\tProductId = ProductKey,\n\t\tItemSku = SKU,\n\t\tProductName = Product,\n\t\tProductColor = Color\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Product\nProduct sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Product',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> ProductSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Territory_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "SalesTerritoryDeltaSource"
						}
					],
					"sinks": [
						{
							"name": "TerritorySink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1SalesTerritoryDeltaSource"
						},
						{
							"name": "SalesTerritory"
						},
						{
							"name": "SelectSalesTerritory"
						},
						{
							"name": "Territory"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tSalesTerritoryKey as integer,\n\t\tRegion as string,\n\t\tCountry as string,\n\t\tGroup as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'SalesTerritory',\n\tmanifestType: 'manifest') ~> SalesTerritoryDeltaSource\nSalesTerritoryDeltaSource aggregate(groupBy(SalesTerritoryKey),\n\tGroup = last(Group),\n\t\tCountry = last(Country),\n\t\tRegion = last(Region)) ~> Deduplicated1SalesTerritoryDeltaSource\nDeduplicated1SalesTerritoryDeltaSource select(mapColumn(\n\t\tGroup,\n\t\tCountry,\n\t\tRegion,\n\t\tSalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SalesTerritory\nSalesTerritory select(mapColumn(\n\t\tGroup,\n\t\tCountry,\n\t\tRegion,\n\t\tSalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectSalesTerritory\nSelectSalesTerritory select(mapColumn(\n\t\tGroup,\n\t\tCountry,\n\t\tRegion,\n\t\tTerritoryId = SalesTerritoryKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Territory\nTerritory sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Territory',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> TerritorySink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TransactionLineItem_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "SalesDeltaSource"
						},
						{
							"name": "SalesOrderSource"
						}
					],
					"sinks": [
						{
							"name": "TransactionLineItemSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1SalesDeltaSource"
						},
						{
							"name": "Sales"
						},
						{
							"name": "Deduplicated1SalesOrderSource"
						},
						{
							"name": "SalesOrder"
						},
						{
							"name": "JoinSalesOrder"
						},
						{
							"name": "SelectJoinSalesOrder"
						},
						{
							"name": "TransactionLineItem"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tSalesAmount as decimal(18,2),\n\t\tTotalProductCost as decimal(18,2),\n\t\tProductStandardCost as decimal(18,2),\n\t\tUnitPriceDiscountPct as decimal(18,2),\n\t\tExtendedAmount as decimal(18,2),\n\t\tUnitPrice as decimal(18,2),\n\t\tOrderQuantity as integer,\n\t\tSalesTerritoryKey as integer,\n\t\tShipDateKey as integer,\n\t\tDueDateKey as integer,\n\t\tOrderDateKey as integer,\n\t\tProductKey as integer,\n\t\tCustomerKey as integer,\n\t\tResellerKey as integer,\n\t\tSalesOrderLineKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Sales',\n\tmanifestType: 'manifest') ~> SalesDeltaSource\nsource(output(\n\t\tSalesOrderLine as string,\n\t\tSalesOrder as string,\n\t\tSalesOrderLineKey as integer,\n\t\tChannel as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'SalesOrder',\n\tmanifestType: 'manifest') ~> SalesOrderSource\nSalesDeltaSource aggregate(groupBy(ProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey),\n\tSalesAmount = last(SalesAmount),\n\t\tTotalProductCost = last(TotalProductCost),\n\t\tProductStandardCost = last(ProductStandardCost),\n\t\tUnitPriceDiscountPct = last(UnitPriceDiscountPct),\n\t\tExtendedAmount = last(ExtendedAmount),\n\t\tUnitPrice = last(UnitPrice),\n\t\tOrderQuantity = last(OrderQuantity),\n\t\tSalesTerritoryKey = last(SalesTerritoryKey),\n\t\tShipDateKey = last(ShipDateKey),\n\t\tDueDateKey = last(DueDateKey),\n\t\tOrderDateKey = last(OrderDateKey)) ~> Deduplicated1SalesDeltaSource\nDeduplicated1SalesDeltaSource select(mapColumn(\n\t\tSalesAmount,\n\t\tTotalProductCost,\n\t\tProductStandardCost,\n\t\tUnitPriceDiscountPct,\n\t\tExtendedAmount,\n\t\tUnitPrice,\n\t\tOrderQuantity,\n\t\tSalesTerritoryKey,\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Sales\nSalesOrderSource aggregate(groupBy(SalesOrderLineKey),\n\tSalesOrderLine = last(SalesOrderLine),\n\t\tSalesOrder = last(SalesOrder),\n\t\tChannel = last(Channel)) ~> Deduplicated1SalesOrderSource\nDeduplicated1SalesOrderSource select(mapColumn(\n\t\tSalesOrderLine,\n\t\tSalesOrder,\n\t\tSalesOrderLineKey,\n\t\tChannel\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SalesOrder\nSales, SalesOrder join(Sales@SalesOrderLineKey === SalesOrder@SalesOrderLineKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSalesOrder\nJoinSalesOrder select(mapColumn(\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tSalesOrder,\n\t\tSales_SalesOrderLineKey_Generated = Sales@SalesOrderLineKey,\n\t\tProductKey,\n\t\tOrderQuantity,\n\t\tUnitPrice,\n\t\tTotalProductCost,\n\t\tProductStandardCost,\n\t\tSalesAmount,\n\t\tUnitPriceDiscountPct\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectJoinSalesOrder\nSelectJoinSalesOrder select(mapColumn(\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tTransactionId = SalesOrder,\n\t\tTransactionLineItemId = Sales_SalesOrderLineKey_Generated,\n\t\tProductId = ProductKey,\n\t\tQuantity = OrderQuantity,\n\t\tProductListPriceAmount = UnitPrice,\n\t\tTransactionProductPriceAmount = TotalProductCost,\n\t\tTotalTransactionLineItemAmount = ProductStandardCost,\n\t\tTotalTransactionSalesPriceAmount = SalesAmount,\n\t\tProductPriceAdjustmentPercentage = UnitPriceDiscountPct\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> TransactionLineItem\nTransactionLineItem sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'TransactionLineItem',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> TransactionLineItemSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transaction_DataFlow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "AdventureWorksDataFlows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "SalesOrderDeltaSource"
						},
						{
							"name": "SalesSource"
						},
						{
							"name": "CustomerDataSource"
						},
						{
							"name": "ResellerSource"
						}
					],
					"sinks": [
						{
							"name": "TransactionSink"
						}
					],
					"transformations": [
						{
							"name": "Deduplicated1SalesOrderDeltaSource"
						},
						{
							"name": "SalesOrder"
						},
						{
							"name": "Deduplicated1SalesSource"
						},
						{
							"name": "Sales"
						},
						{
							"name": "JoinSales"
						},
						{
							"name": "Deduplicated1CustomerDataSource"
						},
						{
							"name": "CustomerData"
						},
						{
							"name": "JoinCustomerData"
						},
						{
							"name": "Deduplicated1ResellerSource"
						},
						{
							"name": "Reseller"
						},
						{
							"name": "JoinReseller"
						},
						{
							"name": "SelectJoinReseller"
						},
						{
							"name": "Transaction"
						}
					],
					"script": "parameters{\n\tmodifiedAfter as timestamp,\n\tmodifiedBefore as timestamp\n}\nsource(output(\n\t\tSalesOrderLine as string,\n\t\tSalesOrder as string,\n\t\tSalesOrderLineKey as integer,\n\t\tChannel as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'SalesOrder',\n\tmanifestType: 'manifest') ~> SalesOrderDeltaSource\nsource(output(\n\t\tSalesAmount as decimal(18,2),\n\t\tTotalProductCost as decimal(18,2),\n\t\tProductStandardCost as decimal(18,2),\n\t\tUnitPriceDiscountPct as decimal(18,2),\n\t\tExtendedAmount as decimal(18,2),\n\t\tUnitPrice as decimal(18,2),\n\t\tOrderQuantity as integer,\n\t\tSalesTerritoryKey as integer,\n\t\tShipDateKey as integer,\n\t\tDueDateKey as integer,\n\t\tOrderDateKey as integer,\n\t\tProductKey as integer,\n\t\tCustomerKey as integer,\n\t\tResellerKey as integer,\n\t\tSalesOrderLineKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Sales',\n\tmanifestType: 'manifest') ~> SalesSource\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string,\n\t\tCustomer as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'CustomerData',\n\tmanifestType: 'manifest') ~> CustomerDataSource\nsource(output(\n\t\tPostalCode as string,\n\t\tCountryRegion as string,\n\t\tStateProvince as string,\n\t\tCity as string,\n\t\tReseller as string,\n\t\tBusinessType as string,\n\t\tResellerId as string,\n\t\tResellerKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworks',\n\ttableName: 'Reseller',\n\tmanifestType: 'manifest') ~> ResellerSource\nSalesOrderDeltaSource aggregate(groupBy(SalesOrderLineKey),\n\tSalesOrderLine = last(SalesOrderLine),\n\t\tSalesOrder = last(SalesOrder),\n\t\tChannel = last(Channel)) ~> Deduplicated1SalesOrderDeltaSource\nDeduplicated1SalesOrderDeltaSource select(mapColumn(\n\t\tSalesOrderLine,\n\t\tSalesOrder,\n\t\tSalesOrderLineKey,\n\t\tChannel\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SalesOrder\nSalesSource aggregate(groupBy(ProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey),\n\tSalesAmount = last(SalesAmount),\n\t\tTotalProductCost = last(TotalProductCost),\n\t\tProductStandardCost = last(ProductStandardCost),\n\t\tUnitPriceDiscountPct = last(UnitPriceDiscountPct),\n\t\tExtendedAmount = last(ExtendedAmount),\n\t\tUnitPrice = last(UnitPrice),\n\t\tOrderQuantity = last(OrderQuantity),\n\t\tSalesTerritoryKey = last(SalesTerritoryKey),\n\t\tShipDateKey = last(ShipDateKey),\n\t\tDueDateKey = last(DueDateKey),\n\t\tOrderDateKey = last(OrderDateKey)) ~> Deduplicated1SalesSource\nDeduplicated1SalesSource select(mapColumn(\n\t\tSalesAmount,\n\t\tTotalProductCost,\n\t\tProductStandardCost,\n\t\tUnitPriceDiscountPct,\n\t\tExtendedAmount,\n\t\tUnitPrice,\n\t\tOrderQuantity,\n\t\tSalesTerritoryKey,\n\t\tShipDateKey,\n\t\tDueDateKey,\n\t\tOrderDateKey,\n\t\tProductKey,\n\t\tCustomerKey,\n\t\tResellerKey,\n\t\tSalesOrderLineKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Sales\nSalesOrder, Sales join(SalesOrder@SalesOrderLineKey === Sales@SalesOrderLineKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSales\nCustomerDataSource aggregate(groupBy(CustomerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tCustomer = last(Customer),\n\t\tCustomerId = last(CustomerId)) ~> Deduplicated1CustomerDataSource\nDeduplicated1CustomerDataSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tCustomer,\n\t\tCustomerId,\n\t\tCustomerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> CustomerData\nJoinSales, CustomerData join(Sales@CustomerKey === CustomerData@CustomerKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinCustomerData\nResellerSource aggregate(groupBy(ResellerKey),\n\tPostalCode = last(PostalCode),\n\t\tCountryRegion = last(CountryRegion),\n\t\tStateProvince = last(StateProvince),\n\t\tCity = last(City),\n\t\tReseller = last(Reseller),\n\t\tBusinessType = last(BusinessType),\n\t\tResellerId = last(ResellerId)) ~> Deduplicated1ResellerSource\nDeduplicated1ResellerSource select(mapColumn(\n\t\tPostalCode,\n\t\tCountryRegion,\n\t\tStateProvince,\n\t\tCity,\n\t\tReseller,\n\t\tBusinessType,\n\t\tResellerId,\n\t\tResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Reseller\nJoinCustomerData, Reseller join(Sales@ResellerKey === Reseller@ResellerKey,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinReseller\nJoinReseller select(mapColumn(\n\t\tSalesOrder,\n\t\tCustomerData_CustomerKey_Generated = CustomerData@CustomerKey,\n\t\tReseller_ResellerKey_Generated = Reseller@ResellerKey\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectJoinReseller\nSelectJoinReseller select(mapColumn(\n\t\tTransactionId = SalesOrder,\n\t\tCustomerId = CustomerData_CustomerKey_Generated,\n\t\tChannelId = Reseller_ResellerKey_Generated\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> Transaction\nTransaction sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tstore: 'synapse',\n\tdatabaseType: 'spark',\n\tformat: 'table',\n\tdatabase: 'adworkstarget',\n\ttableName: 'Transaction',\n\tpartitionBy('hash', 1),\n\tmanifestType: 'manifest') ~> TransactionSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "select count(*) C\nFROM\n(\nSELECT \nICD9_DGNS_CD_2, ICD9_DGNS_CD_3, Count(*) C\n FROM [dbo].[claims]\n group by ICD9_DGNS_CD_2, ICD9_DGNS_CD_3\n having count(*) > 50 and count(*) < 25000\n --order by 2 desc\n) a\n\nselect count(*) c from dbo.claims",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "samplepool",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT count(*) c\n FROM [claims].[dbo].[claims]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "default",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 5')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [tipped]\n,[fareAmount]\n,[paymentType]\n,[passengerCount]\n,[tripDistance]\n,[tripTimeSecs]\n,[pickupTimeBin]\n FROM [default].[dbo].[nyc_taxi]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "default",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlPool_dbo_claims')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'native_analyticsstoragejrs02_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [native_analyticsstoragejrs02_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION   = 'https://analyticsstoragejrs02.dfs.core.windows.net/native', \n\t)\nGo\n\nCREATE EXTERNAL TABLE claims (\n\t[DESYNPUF_ID] varchar(8000),\n\t[CLM_ID] varchar(8000),\n\t[CLM_FROM_DT] datetime2(7),\n\t[CLM_THRU_DT] datetime2(7),\n\t[ICD9_DGNS_CD_1] varchar(8000),\n\t[ICD9_DGNS_CD_2] varchar(8000),\n\t[ICD9_DGNS_CD_3] varchar(8000),\n\t[ICD9_DGNS_CD_4] varchar(8000),\n\t[ICD9_DGNS_CD_5] varchar(8000),\n\t[ICD9_DGNS_CD_6] varchar(8000),\n\t[ICD9_DGNS_CD_7] varchar(8000),\n\t[ICD9_DGNS_CD_8] varchar(8000),\n\t[PRF_PHYSN_NPI_1] varchar(8000),\n\t[PRF_PHYSN_NPI_2] varchar(8000),\n\t[PRF_PHYSN_NPI_3] varchar(8000),\n\t[PRF_PHYSN_NPI_4] varchar(8000),\n\t[PRF_PHYSN_NPI_5] varchar(8000),\n\t[PRF_PHYSN_NPI_6] varchar(8000),\n\t[PRF_PHYSN_NPI_7] varchar(8000),\n\t[PRF_PHYSN_NPI_8] varchar(8000),\n\t[PRF_PHYSN_NPI_9] varchar(8000),\n\t[PRF_PHYSN_NPI_10] varchar(8000),\n\t[PRF_PHYSN_NPI_11] varchar(8000),\n\t[PRF_PHYSN_NPI_12] varchar(8000),\n\t[PRF_PHYSN_NPI_13] varchar(8000),\n\t[TAX_NUM_1] varchar(8000),\n\t[TAX_NUM_2] varchar(8000),\n\t[TAX_NUM_3] varchar(8000),\n\t[TAX_NUM_4] varchar(8000),\n\t[TAX_NUM_5] varchar(8000),\n\t[TAX_NUM_6] varchar(8000),\n\t[TAX_NUM_7] varchar(8000),\n\t[TAX_NUM_8] varchar(8000),\n\t[TAX_NUM_9] varchar(8000),\n\t[TAX_NUM_10] varchar(8000),\n\t[TAX_NUM_11] varchar(8000),\n\t[TAX_NUM_12] varchar(8000),\n\t[TAX_NUM_13] varchar(8000),\n\t[HCPCS_CD_1] varchar(8000),\n\t[HCPCS_CD_2] varchar(8000),\n\t[HCPCS_CD_3] varchar(8000),\n\t[HCPCS_CD_4] varchar(8000),\n\t[HCPCS_CD_5] varchar(8000),\n\t[HCPCS_CD_6] varchar(8000),\n\t[HCPCS_CD_7] varchar(8000),\n\t[HCPCS_CD_8] varchar(8000),\n\t[HCPCS_CD_9] varchar(8000),\n\t[HCPCS_CD_10] varchar(8000),\n\t[HCPCS_CD_11] varchar(8000),\n\t[HCPCS_CD_12] varchar(8000),\n\t[HCPCS_CD_13] varchar(8000),\n\t[LINE_NCH_PMT_AMT_1] real,\n\t[LINE_NCH_PMT_AMT_2] real,\n\t[LINE_NCH_PMT_AMT_3] real,\n\t[LINE_NCH_PMT_AMT_4] real,\n\t[LINE_NCH_PMT_AMT_5] real,\n\t[LINE_NCH_PMT_AMT_6] real,\n\t[LINE_NCH_PMT_AMT_7] real,\n\t[LINE_NCH_PMT_AMT_8] real,\n\t[LINE_NCH_PMT_AMT_9] real,\n\t[LINE_NCH_PMT_AMT_10] real,\n\t[LINE_NCH_PMT_AMT_11] real,\n\t[LINE_NCH_PMT_AMT_12] real,\n\t[LINE_NCH_PMT_AMT_13] real,\n\t[LINE_BENE_PTB_DDCTBL_AMT_1] real,\n\t[LINE_BENE_PTB_DDCTBL_AMT_2] real,\n\t[LINE_BENE_PTB_DDCTBL_AMT_3] real,\n\t[LINE_BENE_PTB_DDCTBL_AMT_4] real,\n\t[LINE_BENE_PTB_DDCTBL_AMT_5] real,\n\t[LINE_BENE_PTB_DDCTBL_AMT_6] real,\n\t[LINE_BENE_PTB_DDCTBL_AMT_7] real,\n\t[LINE_BENE_PTB_DDCTBL_AMT_8] real,\n\t[LINE_BENE_PTB_DDCTBL_AMT_9] real,\n\t[LINE_BENE_PTB_DDCTBL_AMT_10] real,\n\t[LINE_BENE_PTB_DDCTBL_AMT_11] real,\n\t[LINE_BENE_PTB_DDCTBL_AMT_12] real,\n\t[LINE_BENE_PTB_DDCTBL_AMT_13] real,\n\t[LINE_BENE_PRMRY_PYR_PD_AMT_1] real,\n\t[LINE_BENE_PRMRY_PYR_PD_AMT_2] real,\n\t[LINE_BENE_PRMRY_PYR_PD_AMT_3] real,\n\t[LINE_BENE_PRMRY_PYR_PD_AMT_4] real,\n\t[LINE_BENE_PRMRY_PYR_PD_AMT_5] real,\n\t[LINE_BENE_PRMRY_PYR_PD_AMT_6] real,\n\t[LINE_BENE_PRMRY_PYR_PD_AMT_7] real,\n\t[LINE_BENE_PRMRY_PYR_PD_AMT_8] real,\n\t[LINE_BENE_PRMRY_PYR_PD_AMT_9] real,\n\t[LINE_BENE_PRMRY_PYR_PD_AMT_10] real,\n\t[LINE_BENE_PRMRY_PYR_PD_AMT_11] real,\n\t[LINE_BENE_PRMRY_PYR_PD_AMT_12] real,\n\t[LINE_BENE_PRMRY_PYR_PD_AMT_13] real,\n\t[LINE_COINSRNC_AMT_1] real,\n\t[LINE_COINSRNC_AMT_2] real,\n\t[LINE_COINSRNC_AMT_3] real,\n\t[LINE_COINSRNC_AMT_4] real,\n\t[LINE_COINSRNC_AMT_5] real,\n\t[LINE_COINSRNC_AMT_6] real,\n\t[LINE_COINSRNC_AMT_7] real,\n\t[LINE_COINSRNC_AMT_8] real,\n\t[LINE_COINSRNC_AMT_9] real,\n\t[LINE_COINSRNC_AMT_10] real,\n\t[LINE_COINSRNC_AMT_11] real,\n\t[LINE_COINSRNC_AMT_12] real,\n\t[LINE_COINSRNC_AMT_13] real,\n\t[LINE_ALOWD_CHRG_AMT_1] real,\n\t[LINE_ALOWD_CHRG_AMT_2] real,\n\t[LINE_ALOWD_CHRG_AMT_3] real,\n\t[LINE_ALOWD_CHRG_AMT_4] real,\n\t[LINE_ALOWD_CHRG_AMT_5] real,\n\t[LINE_ALOWD_CHRG_AMT_6] real,\n\t[LINE_ALOWD_CHRG_AMT_7] real,\n\t[LINE_ALOWD_CHRG_AMT_8] real,\n\t[LINE_ALOWD_CHRG_AMT_9] real,\n\t[LINE_ALOWD_CHRG_AMT_10] real,\n\t[LINE_ALOWD_CHRG_AMT_11] real,\n\t[LINE_ALOWD_CHRG_AMT_12] real,\n\t[LINE_ALOWD_CHRG_AMT_13] real,\n\t[LINE_PRCSG_IND_CD_1] varchar(8000),\n\t[LINE_PRCSG_IND_CD_2] varchar(8000),\n\t[LINE_PRCSG_IND_CD_3] varchar(8000),\n\t[LINE_PRCSG_IND_CD_4] varchar(8000),\n\t[LINE_PRCSG_IND_CD_5] varchar(8000),\n\t[LINE_PRCSG_IND_CD_6] varchar(8000),\n\t[LINE_PRCSG_IND_CD_7] varchar(8000),\n\t[LINE_PRCSG_IND_CD_8] varchar(8000),\n\t[LINE_PRCSG_IND_CD_9] varchar(8000),\n\t[LINE_PRCSG_IND_CD_10] varchar(8000),\n\t[LINE_PRCSG_IND_CD_11] varchar(8000),\n\t[LINE_PRCSG_IND_CD_12] varchar(8000),\n\t[LINE_PRCSG_IND_CD_13] varchar(8000),\n\t[LINE_ICD9_DGNS_CD_1] varchar(8000),\n\t[LINE_ICD9_DGNS_CD_2] varchar(8000),\n\t[LINE_ICD9_DGNS_CD_3] varchar(8000),\n\t[LINE_ICD9_DGNS_CD_4] varchar(8000),\n\t[LINE_ICD9_DGNS_CD_5] varchar(8000),\n\t[LINE_ICD9_DGNS_CD_6] varchar(8000),\n\t[LINE_ICD9_DGNS_CD_7] varchar(8000),\n\t[LINE_ICD9_DGNS_CD_8] varchar(8000),\n\t[LINE_ICD9_DGNS_CD_9] varchar(8000),\n\t[LINE_ICD9_DGNS_CD_10] varchar(8000),\n\t[LINE_ICD9_DGNS_CD_11] varchar(8000),\n\t[LINE_ICD9_DGNS_CD_12] varchar(8000),\n\t[LINE_ICD9_DGNS_CD_13] varchar(8000),\n\t[REGION] varchar(8000)\n\t)\n\tWITH (\n\tLOCATION = 'carrierClaims_full/parquet/*.parquet',\n\tDATA_SOURCE = [native_analyticsstoragejrs02_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\nSELECT TOP 100 * FROM claims\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "claims",
						"type": "SqlOnDemand"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create Spark Table with NYC Taxi Data')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "myspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "3ab05043-498e-4aa4-9ba0-83e775166601"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/201fa29b-5672-4347-9909-fa57d294b356/resourceGroups/synapsejrs/providers/Microsoft.Synapse/workspaces/synapsejrs/bigDataPools/myspark",
						"name": "myspark",
						"type": "Spark",
						"endpoint": "https://synapsejrs.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/myspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Load data\r\n",
							"Get a sample data of nyc yellow taxi from Azure Open Datasets"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from azureml.opendatasets import NycTlcYellow\r\n",
							"from datetime import datetime\r\n",
							"from dateutil import parser\r\n",
							"\r\n",
							"start_date = parser.parse('2018-05-01')\r\n",
							"end_date = parser.parse('2018-05-07')\r\n",
							"nyc_tlc = NycTlcYellow(start_date=start_date, end_date=end_date)\r\n",
							"nyc_tlc_df = nyc_tlc.to_pandas_dataframe()\r\n",
							"nyc_tlc_df.info()"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from IPython.display import display\r\n",
							"\r\n",
							"sampled_df = nyc_tlc_df.sample(n=10000, random_state=123)\r\n",
							"display(sampled_df.head(5))"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Prepare and featurize data\r\n",
							"- There are extra dimensions that are not going to be useful in the model. We just take the dimensions that we need and put them into the featurised dataframe. \r\n",
							"- There are also a bunch of outliers in the data so we need to filter them out."
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"import numpy\r\n",
							"import pandas\r\n",
							"\r\n",
							"def get_pickup_time(df):\r\n",
							"    pickupHour = df['pickupHour'];\r\n",
							"    if ((pickupHour >= 7) & (pickupHour <= 10)):\r\n",
							"        return 'AMRush'\r\n",
							"    elif ((pickupHour >= 11) & (pickupHour <= 15)):\r\n",
							"        return 'Afternoon'\r\n",
							"    elif ((pickupHour >= 16) & (pickupHour <= 19)):\r\n",
							"        return 'PMRush'\r\n",
							"    else:\r\n",
							"        return 'Night'\r\n",
							"\r\n",
							"featurized_df = pandas.DataFrame()\r\n",
							"featurized_df['tipped'] = (sampled_df['tipAmount'] > 0).astype('int')\r\n",
							"featurized_df['fareAmount'] = sampled_df['fareAmount'].astype('float32')\r\n",
							"featurized_df['paymentType'] = sampled_df['paymentType'].astype('int')\r\n",
							"featurized_df['passengerCount'] = sampled_df['passengerCount'].astype('int')\r\n",
							"featurized_df['tripDistance'] = sampled_df['tripDistance'].astype('float32')\r\n",
							"featurized_df['pickupHour'] = sampled_df['tpepPickupDateTime'].dt.hour.astype('int')\r\n",
							"featurized_df['tripTimeSecs'] = ((sampled_df['tpepDropoffDateTime'] - sampled_df['tpepPickupDateTime']) / numpy.timedelta64(1, 's')).astype('int')\r\n",
							"\r\n",
							"featurized_df['pickupTimeBin'] = featurized_df.apply(get_pickup_time, axis=1)\r\n",
							"featurized_df = featurized_df.drop(columns='pickupHour')\r\n",
							"\r\n",
							"display(featurized_df.head(5))\r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"filtered_df = featurized_df[(featurized_df.tipped >= 0) & (featurized_df.tipped <= 1)\\\r\n",
							"    & (featurized_df.fareAmount >= 1) & (featurized_df.fareAmount <= 250)\\\r\n",
							"    & (featurized_df.paymentType >= 1) & (featurized_df.paymentType <= 2)\\\r\n",
							"    & (featurized_df.passengerCount > 0) & (featurized_df.passengerCount < 8)\\\r\n",
							"    & (featurized_df.tripDistance >= 0) & (featurized_df.tripDistance <= 100)\\\r\n",
							"    & (featurized_df.tripTimeSecs >= 30) & (featurized_df.tripTimeSecs <= 7200)]\r\n",
							"\r\n",
							"filtered_df.info()"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Save the data to spark table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"spark_df = spark.createDataFrame(filtered_df)\r\n",
							"spark_df.write.mode(\"overwrite\").saveAsTable(\"default.NYC_Taxi\")"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Enrollment Bronze')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "myspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9d1172a5-617c-44c5-ad52-cc4f0b35b60e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/201fa29b-5672-4347-9909-fa57d294b356/resourceGroups/synapsejrs/providers/Microsoft.Synapse/workspaces/synapsejrs/bigDataPools/myspark",
						"name": "myspark",
						"type": "Spark",
						"endpoint": "https://synapsejrs.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/myspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"from pyspark.sql.types import StringType, FloatType, IntegerType, StructType, StructField, BooleanType\n",
							"\n",
							"schemaEnrollment = StructType(\n",
							"[StructField('BillingAccountId', StringType(), True),\n",
							"StructField('BillingAccountName', StringType(), True),\n",
							"StructField('BillingPeriodStartDate', StringType(), True),\n",
							"StructField('BillingPeriodEndDate', StringType(), True),\n",
							"StructField('BillingProfileId', StringType(), True),\n",
							"StructField('BillingProfileName', StringType(), True),\n",
							"StructField('AccountOwnerId', StringType(), True),\n",
							"StructField('AccountName', StringType(), True),\n",
							"StructField('SubscriptionId', StringType(), True),\n",
							"StructField('SubscriptionName', StringType(), True),\n",
							"StructField('Date', StringType(), True),\n",
							"StructField('Product', StringType(), True),\n",
							"StructField('PartNumber', StringType(), True),\n",
							"StructField('MeterId', StringType(), True),\n",
							"StructField('ServiceFamily', StringType(), True),\n",
							"StructField('MeterCategory', StringType(), True),\n",
							"StructField('MeterSubCategory', StringType(), True),\n",
							"StructField('MeterRegion', StringType(), True),\n",
							"StructField('MeterName', StringType(), True),\n",
							"StructField('Quantity', FloatType(), True),\n",
							"StructField('EffectivePrice', FloatType(), True),\n",
							"StructField('Cost', FloatType(), True),\n",
							"StructField('UnitPrice', FloatType(), True),\n",
							"StructField('BillingCurrency', StringType(), True),\n",
							"StructField('ResourceLocation', StringType(), True),\n",
							"StructField('AvailabilityZone', StringType(), True),\n",
							"StructField('ConsumedService', StringType(), True),\n",
							"StructField('ResourceId', StringType(), True),\n",
							"StructField('ResourceName', StringType(), True),\n",
							"StructField('ServiceInfo1', StringType(), True),\n",
							"StructField('ServiceInfo2', StringType(), True),\n",
							"StructField('AdditionalInfo', StringType(), True),\n",
							"StructField('Tags', StringType(), True),\n",
							"StructField('InvoiceSectionId', StringType(), True),\n",
							"StructField('InvoiceSection', StringType(), True),\n",
							"StructField('CostCenter', StringType(), True),\n",
							"StructField('UnitOfMeasure', StringType(), True),\n",
							"StructField('ResourceGroup', StringType(), True),\n",
							"StructField('ReservationId', StringType(), True),\n",
							"StructField('ReservationName', StringType(), True),\n",
							"StructField('ProductOrderId', StringType(), True),\n",
							"StructField('ProductOrderName', StringType(), True),\n",
							"StructField('OfferId', StringType(), True),\n",
							"StructField('IsAzureCreditEligible', BooleanType(), True),\n",
							"StructField('Term', StringType(), True),\n",
							"StructField('PublisherName', StringType(), True),\n",
							"StructField('PlanName', StringType(), True),\n",
							"StructField('ChargeType', StringType(), True),\n",
							"StructField('Frequency', StringType(), True),\n",
							"StructField('PublisherType', StringType(), True)]\n",
							")"
						],
						"outputs": [],
						"execution_count": 30
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"from pyspark.sql.functions import to_date, input_file_name, col, split\n",
							"\n",
							"fileName = 'abfss://synapselake@synapselakejrs.dfs.core.windows.net/enrollment/*.csv'\n",
							"\n",
							"df = (spark.read\n",
							"       .option(\"sep\", \",\")\n",
							"       .option(\"escape\",\"\\\"\")\n",
							"       .option(\"header\", \"true\")\n",
							"       .option(\"encoding\", \"UTF-8\")\n",
							"       .csv(fileName)\n",
							"       )\n",
							"\n",
							"df = (\n",
							"       df\n",
							"       .withColumn(\"BillingPeriodStartDate\", to_date(\"BillingPeriodStartDate\", \"MM/dd/yyyy\"))\n",
							"       .withColumn(\"BillingPeriodEndDate\", to_date(\"BillingPeriodEndDate\", \"MM/dd/yyyy\"))\n",
							"       .withColumn(\"Date\", to_date(\"Date\", \"MM/dd/yyyy\"))\n",
							"      )\n",
							""
						],
						"outputs": [],
						"execution_count": 37
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"bronzeParquet = 'abfss://synapselake@synapselakejrs.dfs.core.windows.net/enrollment/Bronze/enrollment'\r\n",
							"df.write.mode(\"overwrite\").format(\"parquet\").save(bronzeParquet)"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"df = spark.read.format(\"parquet\").load(bronzeParquet)"
						],
						"outputs": [],
						"execution_count": 39
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"df = spark.read.format(\"parquet\").load(fileNameParquet)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [],
									"yLabel": "",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							}
						},
						"source": [
							"%%sql\n",
							"\n",
							"DROP TABLE IF EXISTS claims"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [],
									"yLabel": "",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							}
						},
						"source": [
							"%%sql\n",
							"\n",
							"CREATE TABLE claims\n",
							"USING PARQUET\n",
							"LOCATION 'abfss://native@analyticsstoragejrs02.dfs.core.windows.net/carrierClaims_full/parquet'"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"DESYNPUF_ID"
									],
									"values": [
										"LINE_NCH_PMT_AMT_1"
									],
									"yLabel": "LINE_NCH_PMT_AMT_1",
									"xLabel": "DESYNPUF_ID",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"LINE_NCH_PMT_AMT_1\":{\"00052705243EA128\":10,\"000B4662348C35B4\":30,\"001731EB127233DA\":20,\"00196F0702489342\":0,\"001AFA59A08ABBF1\":0,\"001F135A720283D1\":10,\"00242FF5E7A3F2D9\":20,\"0024BC7896C93558\":210,\"0025ACAB19F5DEC0\":10,\"002D423A942D9005\":100}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							}
						},
						"source": [
							"%%sql\n",
							"select count(*) from claims"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"df = spark.read.format(\"delta\").load(fileNameDelta)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"df.count()"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [],
									"yLabel": "",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							}
						},
						"source": [
							"%%sql\n",
							"\n",
							"DROP TABLE IF EXISTS claims_delta"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [],
									"yLabel": "",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							}
						},
						"source": [
							"%%sql\n",
							"\n",
							"CREATE TABLE claims_delta\n",
							"USING DELTA\n",
							"LOCATION 'abfss://native@analyticsstoragejrs02.dfs.core.windows.net/carrierClaims_full/delta'"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"DESYNPUF_ID"
									],
									"values": [
										"LINE_NCH_PMT_AMT_1"
									],
									"yLabel": "LINE_NCH_PMT_AMT_1",
									"xLabel": "DESYNPUF_ID",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"LINE_NCH_PMT_AMT_1\":{\"01835A1F14535E45\":0,\"09BD9F35EB6ECFBA\":140,\"0F626E7236FA8941\":160,\"13DB10B327CC2AD4\":50,\"1C757740467501D1\":20,\"287C332588023F86\":0,\"39A7D3F594602D6A\":50,\"4FD9FD922A203404\":20,\"6412818FF28567F5\":80,\"705E7F445FEC03F2\":60}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							}
						},
						"source": [
							"%%sql\n",
							"\n",
							"select * from claims_delta limit 10"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\n",
							"\n",
							"OPTIMIZE claims_delta"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "myspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7f3e9737-e6f1-4721-91f7-f174f02c3c39"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/201fa29b-5672-4347-9909-fa57d294b356/resourceGroups/synapsejrs/providers/Microsoft.Synapse/workspaces/synapsejrs/bigDataPools/myspark",
						"name": "myspark",
						"type": "Spark",
						"endpoint": "https://synapsejrs.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/myspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql.types import StringType, FloatType, IntegerType, StructType, StructField\n",
							"\n",
							"scheamCarrierClaim = StructType(\n",
							"[StructField('DESYNPUF_ID', StringType(), True),\n",
							" StructField('CLM_ID', StringType(), True),\n",
							" StructField('CLM_FROM_DT', StringType(), True),\n",
							" StructField('CLM_THRU_DT', StringType(), True),\n",
							" StructField('ICD9_DGNS_CD_1', StringType(), True),\n",
							" StructField('ICD9_DGNS_CD_2', StringType(), True),\n",
							" StructField('ICD9_DGNS_CD_3', StringType(), True),\n",
							" StructField('ICD9_DGNS_CD_4', StringType(), True),\n",
							" StructField('ICD9_DGNS_CD_5', StringType(), True),\n",
							" StructField('ICD9_DGNS_CD_6', StringType(), True),\n",
							" StructField('ICD9_DGNS_CD_7', StringType(), True),\n",
							" StructField('ICD9_DGNS_CD_8', StringType(), True),\n",
							" StructField('PRF_PHYSN_NPI_1', StringType(), True),\n",
							" StructField('PRF_PHYSN_NPI_2', StringType(), True),\n",
							" StructField('PRF_PHYSN_NPI_3', StringType(), True),\n",
							" StructField('PRF_PHYSN_NPI_4', StringType(), True),\n",
							" StructField('PRF_PHYSN_NPI_5', StringType(), True),\n",
							" StructField('PRF_PHYSN_NPI_6', StringType(), True),\n",
							" StructField('PRF_PHYSN_NPI_7', StringType(), True),\n",
							" StructField('PRF_PHYSN_NPI_8', StringType(), True),\n",
							" StructField('PRF_PHYSN_NPI_9', StringType(), True),\n",
							" StructField('PRF_PHYSN_NPI_10', StringType(), True),\n",
							" StructField('PRF_PHYSN_NPI_11', StringType(), True),\n",
							" StructField('PRF_PHYSN_NPI_12', StringType(), True),\n",
							" StructField('PRF_PHYSN_NPI_13', StringType(), True),\n",
							" StructField('TAX_NUM_1', StringType(), True),\n",
							" StructField('TAX_NUM_2', StringType(), True),\n",
							" StructField('TAX_NUM_3', StringType(), True),\n",
							" StructField('TAX_NUM_4', StringType(), True),\n",
							" StructField('TAX_NUM_5', StringType(), True),\n",
							" StructField('TAX_NUM_6', StringType(), True),\n",
							" StructField('TAX_NUM_7', StringType(), True),\n",
							" StructField('TAX_NUM_8', StringType(), True),\n",
							" StructField('TAX_NUM_9', StringType(), True),\n",
							" StructField('TAX_NUM_10', StringType(), True),\n",
							" StructField('TAX_NUM_11', StringType(), True),\n",
							" StructField('TAX_NUM_12', StringType(), True),\n",
							" StructField('TAX_NUM_13', StringType(), True),\n",
							" StructField('HCPCS_CD_1', StringType(), True),\n",
							" StructField('HCPCS_CD_2', StringType(), True),\n",
							" StructField('HCPCS_CD_3', StringType(), True),\n",
							" StructField('HCPCS_CD_4', StringType(), True),\n",
							" StructField('HCPCS_CD_5', StringType(), True),\n",
							" StructField('HCPCS_CD_6', StringType(), True),\n",
							" StructField('HCPCS_CD_7', StringType(), True),\n",
							" StructField('HCPCS_CD_8', StringType(), True),\n",
							" StructField('HCPCS_CD_9', StringType(), True),\n",
							" StructField('HCPCS_CD_10', StringType(), True),\n",
							" StructField('HCPCS_CD_11', StringType(), True),\n",
							" StructField('HCPCS_CD_12', StringType(), True),\n",
							" StructField('HCPCS_CD_13', StringType(), True),\n",
							" StructField('LINE_NCH_PMT_AMT_1', FloatType(), True),\n",
							" StructField('LINE_NCH_PMT_AMT_2', FloatType(), True),\n",
							" StructField('LINE_NCH_PMT_AMT_3', FloatType(), True),\n",
							" StructField('LINE_NCH_PMT_AMT_4', FloatType(), True),\n",
							" StructField('LINE_NCH_PMT_AMT_5', FloatType(), True),\n",
							" StructField('LINE_NCH_PMT_AMT_6', FloatType(), True),\n",
							" StructField('LINE_NCH_PMT_AMT_7', FloatType(), True),\n",
							" StructField('LINE_NCH_PMT_AMT_8', FloatType(), True),\n",
							" StructField('LINE_NCH_PMT_AMT_9', FloatType(), True),\n",
							" StructField('LINE_NCH_PMT_AMT_10', FloatType(), True),\n",
							" StructField('LINE_NCH_PMT_AMT_11', FloatType(), True),\n",
							" StructField('LINE_NCH_PMT_AMT_12', FloatType(), True),\n",
							" StructField('LINE_NCH_PMT_AMT_13', FloatType(), True),\n",
							" StructField('LINE_BENE_PTB_DDCTBL_AMT_1', FloatType(), True),\n",
							" StructField('LINE_BENE_PTB_DDCTBL_AMT_2', FloatType(), True),\n",
							" StructField('LINE_BENE_PTB_DDCTBL_AMT_3', FloatType(), True),\n",
							" StructField('LINE_BENE_PTB_DDCTBL_AMT_4', FloatType(), True),\n",
							" StructField('LINE_BENE_PTB_DDCTBL_AMT_5', FloatType(), True),\n",
							" StructField('LINE_BENE_PTB_DDCTBL_AMT_6', FloatType(), True),\n",
							" StructField('LINE_BENE_PTB_DDCTBL_AMT_7', FloatType(), True),\n",
							" StructField('LINE_BENE_PTB_DDCTBL_AMT_8', FloatType(), True),\n",
							" StructField('LINE_BENE_PTB_DDCTBL_AMT_9', FloatType(), True),\n",
							" StructField('LINE_BENE_PTB_DDCTBL_AMT_10', FloatType(), True),\n",
							" StructField('LINE_BENE_PTB_DDCTBL_AMT_11', FloatType(), True),\n",
							" StructField('LINE_BENE_PTB_DDCTBL_AMT_12', FloatType(), True),\n",
							" StructField('LINE_BENE_PTB_DDCTBL_AMT_13', FloatType(), True),\n",
							" StructField('LINE_BENE_PRMRY_PYR_PD_AMT_1', FloatType(), True),\n",
							" StructField('LINE_BENE_PRMRY_PYR_PD_AMT_2', FloatType(), True),\n",
							" StructField('LINE_BENE_PRMRY_PYR_PD_AMT_3', FloatType(), True),\n",
							" StructField('LINE_BENE_PRMRY_PYR_PD_AMT_4', FloatType(), True),\n",
							" StructField('LINE_BENE_PRMRY_PYR_PD_AMT_5', FloatType(), True),\n",
							" StructField('LINE_BENE_PRMRY_PYR_PD_AMT_6', FloatType(), True),\n",
							" StructField('LINE_BENE_PRMRY_PYR_PD_AMT_7', FloatType(), True),\n",
							" StructField('LINE_BENE_PRMRY_PYR_PD_AMT_8', FloatType(), True),\n",
							" StructField('LINE_BENE_PRMRY_PYR_PD_AMT_9', FloatType(), True),\n",
							" StructField('LINE_BENE_PRMRY_PYR_PD_AMT_10', FloatType(), True),\n",
							" StructField('LINE_BENE_PRMRY_PYR_PD_AMT_11', FloatType(), True),\n",
							" StructField('LINE_BENE_PRMRY_PYR_PD_AMT_12', FloatType(), True),\n",
							" StructField('LINE_BENE_PRMRY_PYR_PD_AMT_13', FloatType(), True),\n",
							" StructField('LINE_COINSRNC_AMT_1', FloatType(), True),\n",
							" StructField('LINE_COINSRNC_AMT_2', FloatType(), True),\n",
							" StructField('LINE_COINSRNC_AMT_3', FloatType(), True),\n",
							" StructField('LINE_COINSRNC_AMT_4', FloatType(), True),\n",
							" StructField('LINE_COINSRNC_AMT_5', FloatType(), True),\n",
							" StructField('LINE_COINSRNC_AMT_6', FloatType(), True),\n",
							" StructField('LINE_COINSRNC_AMT_7', FloatType(), True),\n",
							" StructField('LINE_COINSRNC_AMT_8', FloatType(), True),\n",
							" StructField('LINE_COINSRNC_AMT_9', FloatType(), True),\n",
							" StructField('LINE_COINSRNC_AMT_10', FloatType(), True),\n",
							" StructField('LINE_COINSRNC_AMT_11', FloatType(), True),\n",
							" StructField('LINE_COINSRNC_AMT_12', FloatType(), True),\n",
							" StructField('LINE_COINSRNC_AMT_13', FloatType(), True),\n",
							" StructField('LINE_ALOWD_CHRG_AMT_1', FloatType(), True),\n",
							" StructField('LINE_ALOWD_CHRG_AMT_2', FloatType(), True),\n",
							" StructField('LINE_ALOWD_CHRG_AMT_3', FloatType(), True),\n",
							" StructField('LINE_ALOWD_CHRG_AMT_4', FloatType(), True),\n",
							" StructField('LINE_ALOWD_CHRG_AMT_5', FloatType(), True),\n",
							" StructField('LINE_ALOWD_CHRG_AMT_6', FloatType(), True),\n",
							" StructField('LINE_ALOWD_CHRG_AMT_7', FloatType(), True),\n",
							" StructField('LINE_ALOWD_CHRG_AMT_8', FloatType(), True),\n",
							" StructField('LINE_ALOWD_CHRG_AMT_9', FloatType(), True),\n",
							" StructField('LINE_ALOWD_CHRG_AMT_10', FloatType(), True),\n",
							" StructField('LINE_ALOWD_CHRG_AMT_11', FloatType(), True),\n",
							" StructField('LINE_ALOWD_CHRG_AMT_12', FloatType(), True),\n",
							" StructField('LINE_ALOWD_CHRG_AMT_13', FloatType(), True),\n",
							" StructField('LINE_PRCSG_IND_CD_1', StringType(), True),\n",
							" StructField('LINE_PRCSG_IND_CD_2', StringType(), True),\n",
							" StructField('LINE_PRCSG_IND_CD_3', StringType(), True),\n",
							" StructField('LINE_PRCSG_IND_CD_4', StringType(), True),\n",
							" StructField('LINE_PRCSG_IND_CD_5', StringType(), True),\n",
							" StructField('LINE_PRCSG_IND_CD_6', StringType(), True),\n",
							" StructField('LINE_PRCSG_IND_CD_7', StringType(), True),\n",
							" StructField('LINE_PRCSG_IND_CD_8', StringType(), True),\n",
							" StructField('LINE_PRCSG_IND_CD_9', StringType(), True), \n",
							" StructField('LINE_PRCSG_IND_CD_10', StringType(), True),\n",
							" StructField('LINE_PRCSG_IND_CD_11', StringType(), True),\n",
							" StructField('LINE_PRCSG_IND_CD_12', StringType(), True),\n",
							" StructField('LINE_PRCSG_IND_CD_13', StringType(), True),\n",
							" StructField('LINE_ICD9_DGNS_CD_1', StringType(), True),\n",
							" StructField('LINE_ICD9_DGNS_CD_2', StringType(), True),\n",
							" StructField('LINE_ICD9_DGNS_CD_3', StringType(), True),\n",
							" StructField('LINE_ICD9_DGNS_CD_4', StringType(), True),\n",
							" StructField('LINE_ICD9_DGNS_CD_5', StringType(), True),\n",
							" StructField('LINE_ICD9_DGNS_CD_6', StringType(), True),\n",
							" StructField('LINE_ICD9_DGNS_CD_7', StringType(), True),\n",
							" StructField('LINE_ICD9_DGNS_CD_8', StringType(), True),\n",
							" StructField('LINE_ICD9_DGNS_CD_9', StringType(), True),\n",
							" StructField('LINE_ICD9_DGNS_CD_10', StringType(), True),\n",
							" StructField('LINE_ICD9_DGNS_CD_11', StringType(), True),\n",
							" StructField('LINE_ICD9_DGNS_CD_12', StringType(), True),\n",
							" StructField('LINE_ICD9_DGNS_CD_13', StringType(), True)]\n",
							")"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql.functions import to_date, input_file_name, col, split\n",
							"\n",
							"fileName = 'abfss://carrierclaims@analyticsstoragejrs02.dfs.core.windows.net/raw/0*/*/*/*.csv'\n",
							"\n",
							"df = spark.read.csv(fileName, header=True, schema=scheamCarrierClaim)\n",
							"df  = (df\n",
							"       .withColumn(\"CLM_FROM_DT\", to_date(\"CLM_FROM_DT\", \"yyyyMMdd\"))\n",
							"       .withColumn(\"CLM_THRU_DT\", to_date(\"CLM_THRU_DT\", \"yyyyMMdd\"))\n",
							"       .withColumn(\"REGION\", split(input_file_name(),\"/\")[4])\n",
							"      )\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"DESYNPUF_ID"
									],
									"values": [
										"LINE_NCH_PMT_AMT_1"
									],
									"yLabel": "LINE_NCH_PMT_AMT_1",
									"xLabel": "DESYNPUF_ID",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"LINE_NCH_PMT_AMT_1\":{\"0031E4B9F2F11B24\":30,\"0085B4F55FFA358D\":0,\"00F344BE3FC590CB\":30,\"014BAF52258B1C69\":130,\"015B43D5AA5B53F0\":10,\"0170B489B0D541E7\":60,\"01ADE599B8FB38BA\":240,\"01BF2153825488B6\":50,\"022F8A14D442E050\":80,\"028B007A3E5D8F20\":0,\"03A5915A7F8D887F\":20,\"03AEAF24B59C6DE2\":50,\"043BC2183C6C7CA5\":10,\"04AB0812FA195667\":30,\"05726B2E620150DF\":0,\"06A808D5772C1E65\":20,\"06CA07CDE4F70B8C\":40,\"074DF6B08102985B\":90,\"078836AF364D62CD\":10,\"097AD604E13C41FA\":50,\"0990316314020B94\":10,\"09C878EE80FBBE60\":20,\"0B8753C7CD0A4108\":120,\"0CEF273C19FC27E9\":10,\"0D86392B807AA170\":30,\"0DA455C1F7796390\":50,\"0DE7FB31EA45D98F\":20,\"0EBE9FDE96B29550\":50,\"0F236DF551CBD97D\":70,\"1003C9FD9140BCE3\":50,\"104405581618E054\":220,\"10451E8CB87889EE\":180,\"1074F22E78A89BA7\":40,\"10B1C4800A0315C2\":20,\"10DC0FED4B517803\":0,\"122D469816451D64\":0,\"12BFB93284256C5E\":10,\"1305BA27C70575BC\":80,\"1378A2253213729C\":20,\"141156271A0AFA60\":30,\"141F85AA84D95782\":0,\"14FF7624F89D2512\":40,\"1517F7AAB3F26785\":20,\"15F3FD45D82BB46C\":10,\"16E35F6270156A28\":60,\"16F8975D128F212D\":20,\"1875EB6F7EB03894\":190,\"1A00E7EC9DD9A1D8\":10,\"1B3C919369D3AE35\":10,\"1B7EA5025FCC4994\":0,\"1B94A8041C8FA11F\":40,\"1C19621EFD279832\":180,\"1C53521B872607B0\":70,\"1CF1FC3685DA4732\":0,\"1D2F992A090DB945\":0,\"1E23BE1ED6FC3586\":10,\"1E497B65162A6BAF\":110,\"1E87206DD08E0911\":0,\"20C9A53EDC264F4C\":0,\"225200FD996AD70F\":50,\"22696C2438A60AEC\":330,\"22EDD2DFAA615A5A\":0,\"234664DBD8ABE866\":30,\"2435C974D7433ECB\":0,\"2507CF060D98FF48\":50,\"2547C72CFFC10B5F\":70,\"25D32FD09C9ADCCF\":30,\"2635E21BB3748B4A\":20,\"264C1837B5DC4259\":30,\"269890CC5985BE2A\":10,\"27DB2C3741BF750F\":10,\"2814F0ACE16680E6\":30,\"28234B6E8D83A97D\":70,\"28C65E8D33DE3985\":70,\"2A2F53CA8FA95B30\":40,\"2A505CE34014CED4\":0,\"2A7AC464A476B070\":50,\"2B220F6CB82832E8\":70,\"2B39F50F308BDBA9\":30,\"2C1FC3798CE1AFA3\":70,\"2D91D3F4C620941F\":100,\"2D9B2F5F7849B1B8\":0,\"2D9D8EB12DA7A26F\":30,\"2EEBC90C9899BC19\":50,\"30555CF7DA792CE5\":130,\"31A8E2E22DAA4D0E\":730,\"31DA8B61682A86E6\":120,\"3243A669996E3A89\":50,\"32505BDC0D6966DB\":50,\"328B53F05EB821C7\":0,\"32FDBEE774C42963\":100,\"339BE12FB9746D3C\":50,\"33D0177B12D30BA9\":20,\"345D0773832D6C3B\":80,\"34667D70A389B286\":10,\"34738CECB90867B8\":0,\"34A79BFB2EAB4BD6\":10,\"35E3A0A335AADFDC\":30,\"369F7E8A7581A8C3\":50,\"36FDDD1A67CEC78A\":50,\"37D6AC8A1933DA8A\":40,\"381DA2318318FDD5\":140,\"38A7ED2127E94CD0\":0,\"397543BC4A83CCE3\":40,\"3ACE7F57944945A1\":170,\"3AF93E2D9C460575\":0,\"3B700B7A969D0B29\":50,\"3B80F8B1D7F3FDF0\":10,\"3BA6658DA87DAB0C\":40,\"3BDB29254BF28310\":30,\"3D2A3D9208776441\":60,\"3E1459D192BCF329\":50,\"4053A3C46B7551AD\":50,\"41DD0E4F0768659F\":90,\"435CCBEB6C2C6F84\":80,\"43A2DC55812D6A16\":80,\"43C2BAE8B756E350\":50,\"43F06D23E34B11CC\":20,\"43F5D01D176ACDD5\":0,\"4449118CBB2B20D0\":200,\"445681BAAF210585\":30,\"44EAF31CC6AC729A\":50,\"4539E062B3145039\":60,\"454CF3828ECBBD4D\":40,\"4567C52B3B936F97\":10,\"46CEF44CDF69A89D\":240,\"470CCBF9B5A19B87\":30,\"483AB5E88419DDEC\":30,\"48AA9080FB790D6B\":40,\"490A5E0C87450D28\":50,\"49A7C74F323C9A0A\":80,\"49EF4FC02C17A4AD\":0,\"4B6F96D8CA601264\":0,\"4C5BBD3E1D482320\":50,\"4C754A4DAB7B2EC2\":0,\"4C8BC28550184867\":30,\"4CD6C7DEA31044A3\":10,\"4CFA040591F7A4F6\":30,\"4D072CE10E17DDE9\":20,\"4DB736B6EE90EF55\":70,\"4E332C0A21AC2BFA\":50,\"4E73DC4934E1F5A9\":10,\"4EBB8B400FC84975\":10,\"4F52738841D5DCD7\":70,\"50B503451F6DD2D4\":30,\"511C6A9A9EA81284\":0,\"51C82E2498CA2280\":150,\"52B5D170DACEAA18\":80,\"541C0EEC4E4E1011\":20,\"549479EC08F0893E\":0,\"55BCF435B3DFC546\":80,\"55E2FF1E0DD465F6\":110,\"5640FE62D172A3CE\":0,\"580B938D596D2967\":0,\"58306C73F2E750FF\":0,\"5A3C5EDF20D6CD6C\":60,\"5AF303D5D34DFA9D\":50,\"5B8C435CDF590F89\":40,\"5D8167E610C5553F\":50,\"5DC1F5413CAA5958\":0,\"5EBDF2DA87DBD45F\":20,\"5FECD5E9FFE50034\":160,\"6087A0D76E90451F\":390,\"610C6D5601774D06\":60,\"61B1E7C4E1305C10\":80,\"6281DBC7800C2DD3\":50,\"635DA0C97106DC3A\":10,\"63A8F696879FEC8B\":70,\"64266F46E808DCC9\":30,\"65AEB2716335A299\":50,\"65BC9A873B267803\":0,\"65EC291741CC23A7\":80,\"6689AB2F380EC6C4\":70,\"66E19806F8C4FB07\":40,\"6701499A2688D3FD\":40,\"67091E4B0E16DE2E\":10,\"677E486E1C39BCE4\":30,\"67A19F09743DCB26\":60,\"681DB110A366C7F7\":50,\"6835AD51B29C062E\":0,\"68440A0BB6D8E94F\":90,\"68FA67A65AFDF9ED\":0,\"6A98C3ACE5C6288E\":100,\"6AA5939D3195E979\":10,\"6BE10E00AD656A25\":20,\"6C69BD263A860C4E\":70,\"6C9DF3AB3B216E4C\":20,\"6CB97627C6E741BD\":120,\"6CF837F05191F3C7\":0,\"6D2EE61EC3CDF3C8\":90,\"6DEA7172B0B6612D\":30,\"6E953B64C4BE9547\":0,\"6F2DB67A79C0B7A4\":20,\"6F4C60952C679E10\":70,\"6F76BE1E878A7D17\":30,\"7113E3E90BABF5FB\":0,\"711C0F058B4300EC\":80,\"71324BDAC9599D89\":10,\"718CA52D249E0C8B\":80,\"72DAF9E6E3948208\":0,\"73A0C6A065D5137E\":80,\"74933A2C5877435D\":50,\"74E6634274298D32\":50,\"75EFE0A771D160D1\":160,\"77A40D7C87DA2DBE\":0,\"789D93EF67E48A48\":0,\"78CA7FDCB317A46E\":0,\"790E334E6A052C03\":80,\"794471B2FFB8D233\":80,\"79B01CD677A845EF\":130,\"79C9E147B1B684BC\":0,\"7A355EA042EA39BB\":50,\"7ABCA9A6172FC6F5\":0,\"7B79799BD3721189\":0,\"7BD29AF04915D7F1\":0,\"7D731873A96B28EC\":30,\"7D7D0E2E66949AF2\":20,\"7E0816CF134230E1\":0,\"7E8BE94E9B1EFB45\":80}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"fileNameParquet = 'abfss://native@analyticsstoragejrs02.dfs.core.windows.net/carrierClaims_full/parquet'\n",
							"\n",
							"df.write.mode(\"overwrite\").format(\"parquet\").save(fileNameParquet)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"source": [
							"fileNameParquet = 'abfss://native@analyticsstoragejrs02.dfs.core.windows.net/carrierClaims_full/parquet'\n",
							"fileNameDelta = 'abfss://native@analyticsstoragejrs02.dfs.core.windows.net/carrierClaims_full/delta'\n",
							"\n",
							"df = spark.read.format(\"parquet\").load(fileNameParquet)\n",
							"df.write.mode(\"overwrite\").format(\"delta\").save(fileNameDelta)"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"source": [
							"df = spark.read.format(\"parquet\").load(fileNameParquet)"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [],
									"yLabel": "",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							}
						},
						"source": [
							"%%sql\n",
							"\n",
							"DROP TABLE IF EXISTS claims"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [],
									"yLabel": "",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							}
						},
						"source": [
							"%%sql\n",
							"\n",
							"CREATE TABLE claims\n",
							"USING PARQUET\n",
							"LOCATION 'abfss://native@analyticsstoragejrs02.dfs.core.windows.net/carrierClaims_full/parquet'"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"DESYNPUF_ID"
									],
									"values": [
										"LINE_NCH_PMT_AMT_1"
									],
									"yLabel": "LINE_NCH_PMT_AMT_1",
									"xLabel": "DESYNPUF_ID",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"LINE_NCH_PMT_AMT_1\":{\"00052705243EA128\":10,\"000B4662348C35B4\":30,\"001731EB127233DA\":20,\"00196F0702489342\":0,\"001AFA59A08ABBF1\":0,\"001F135A720283D1\":10,\"00242FF5E7A3F2D9\":20,\"0024BC7896C93558\":210,\"0025ACAB19F5DEC0\":10,\"002D423A942D9005\":100}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							}
						},
						"source": [
							"%%sql\n",
							"select count(*) from claims"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"df = spark.read.format(\"delta\").load(fileNameDelta)"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"df.count()"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [],
									"yLabel": "",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							}
						},
						"source": [
							"%%sql\n",
							"\n",
							"DROP TABLE IF EXISTS claims_delta"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [],
									"yLabel": "",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							}
						},
						"source": [
							"%%sql\n",
							"\n",
							"CREATE TABLE claims_delta\n",
							"USING DELTA\n",
							"LOCATION 'abfss://native@analyticsstoragejrs02.dfs.core.windows.net/carrierClaims_full/delta'"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"DESYNPUF_ID"
									],
									"values": [
										"LINE_NCH_PMT_AMT_1"
									],
									"yLabel": "LINE_NCH_PMT_AMT_1",
									"xLabel": "DESYNPUF_ID",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"LINE_NCH_PMT_AMT_1\":{\"01835A1F14535E45\":0,\"09BD9F35EB6ECFBA\":140,\"0F626E7236FA8941\":160,\"13DB10B327CC2AD4\":50,\"1C757740467501D1\":20,\"287C332588023F86\":0,\"39A7D3F594602D6A\":50,\"4FD9FD922A203404\":20,\"6412818FF28567F5\":80,\"705E7F445FEC03F2\":60}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": true
							}
						},
						"source": [
							"%%sql\n",
							"\n",
							"select * from claims_delta limit 10"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							}
						},
						"source": [
							"%%sql\n",
							"\n",
							"OPTIMIZE claims_delta"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "myspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e1cb7e09-61de-48d1-a2e0-d869e2811d9c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/201fa29b-5672-4347-9909-fa57d294b356/resourceGroups/synapsejrs/providers/Microsoft.Synapse/workspaces/synapsejrs/bigDataPools/myspark",
						"name": "myspark",
						"type": "Spark",
						"endpoint": "https://synapsejrs.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/myspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://synapselake@synapselakejrs.dfs.core.windows.net/cms-part-d/native/', format='delta')\r\n",
							"\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df.createOrReplaceTempView(\"cms\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"SELECT\r\n",
							"specialty_description, year, (total_drug_cost / total_claim_count) avg_cost_per_claim, total_claim_count\r\n",
							"FROM\r\n",
							"(\r\n",
							"select specialty_description, year, sum(total_claim_count) total_claim_count, sum(total_drug_cost) total_drug_cost from cms group by specialty_description, year\r\n",
							") a\r\n",
							"where total_claim_count > 9999\r\n",
							"order by 3 desc"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nb_Native_CMS_Part_D')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "myspark",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d0c40b59-7f22-40e0-82a9-d88d4851417f"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/201fa29b-5672-4347-9909-fa57d294b356/resourceGroups/synapsejrs/providers/Microsoft.Synapse/workspaces/synapsejrs/bigDataPools/myspark",
						"name": "myspark",
						"type": "Spark",
						"endpoint": "https://synapsejrs.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/myspark",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true,
							"tags": [
								"parameters"
							]
						},
						"source": [
							"prmFileName = 'PartD_Prescriber_PUF_NPI_Drug_13.txt'"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"def getYear(fileName):\r\n",
							"    f =prmFileName.split('.')[0]\r\n",
							"    tdy = f[len(f)-2:]\r\n",
							"    return '20{0}'.format(tdy)"
						],
						"outputs": [],
						"execution_count": 32
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true,
							"tags": []
						},
						"source": [
							"csvPath = 'abfss://synapselake@synapselakejrs.dfs.core.windows.net/cms-part-d/raw/{0}'.format(prmFileName)\r\n",
							"deltaPath = 'abfss://synapselake@synapselakejrs.dfs.core.windows.net/cms-part-d/native/'\r\n",
							"\r\n",
							"vYear = getYear(prmFileName)"
						],
						"outputs": [],
						"execution_count": 129
					},
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql.types import StringType, FloatType, IntegerType, StructType, StructField\r\n",
							"\r\n",
							"scheamPartD = StructType(\r\n",
							"[StructField('npi', StringType(), True),\r\n",
							" StructField('nppes_provider_last_org_name', StringType(), True),\r\n",
							" StructField('nppes_provider_first_mame', StringType(), True),\r\n",
							" StructField('nppes_provider_city', StringType(), True),\r\n",
							" StructField('nppes_provider_state', StringType(), True),\r\n",
							" StructField('specialty_description', StringType(), True),\r\n",
							" StructField('description_flag', StringType(), True),\r\n",
							" StructField('drug_name', StringType(), True),\r\n",
							" StructField('generic_name', StringType(), True),\r\n",
							" StructField('bene_count', IntegerType(), True),\r\n",
							" StructField('total_claim_count', IntegerType(), True),\r\n",
							" StructField('total_30_day_fill_count', FloatType(), True),\r\n",
							" StructField('total_day_supply', IntegerType(), True),\r\n",
							" StructField('total_drug_cost', FloatType(), True),\r\n",
							" StructField('bene_count_ge65', IntegerType(), True),\r\n",
							" StructField('bene_count_ge65_supress_flag', StringType(), True),\r\n",
							" StructField('total_claim_count_ge65', IntegerType(), True),\r\n",
							" StructField('ge65_supress_flag', StringType(), True),\r\n",
							" StructField('total_30_day_fill_count_ge65', FloatType(), True),\r\n",
							" StructField('total_day_supply_ge65', IntegerType(), True),\r\n",
							" StructField('total_drug_cost_ge65', FloatType(), True)\r\n",
							"])"
						],
						"outputs": [],
						"execution_count": 130
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df = spark.read.format(\"csv\").option(\"header\", \"true\").option(\"delimiter\", \"\\t\").schema(scheamPartD).load(csvPath)"
						],
						"outputs": [],
						"execution_count": 131
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"import pyspark.sql.functions as F\r\n",
							"df = df.withColumn(\"year\", F.lit(vYear).astype(\"string\"))"
						],
						"outputs": [],
						"execution_count": 132
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"(df.write.format('delta')\r\n",
							".partitionBy('year')\r\n",
							".mode('overwrite')\r\n",
							".option(\"replaceWhere\", \"year = '{0}'\".format(vYear))\r\n",
							".save(deltaPath)\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 133
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"ddf = spark.read.format(\"delta\").load(deltaPath)"
						],
						"outputs": [],
						"execution_count": 134
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"ddf.count()"
						],
						"outputs": [],
						"execution_count": 135
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CMS')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "CMS",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://synapselake@synapselakejrs.dfs.core.windows.net/CMS",
								"Properties": {
									"FormatType": "parquet",
									"LinkedServiceName": "synapsejrs-WorkspaceDefaultStorage"
								}
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "Claims",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "CMS"
							},
							"Description": "",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "DESYNPUF_ID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "CLM_ID",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "CLM_FROM_DT",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "date"
											}
										}
									},
									{
										"Name": "CLM_THRU_DT",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "date"
											}
										}
									},
									{
										"Name": "ICD9_DGNS_CD_1",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "ICD9_DGNS_CD_2",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "ICD9_DGNS_CD_3",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "ICD9_DGNS_CD_4",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "ICD9_DGNS_CD_5",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "ICD9_DGNS_CD_6",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "ICD9_DGNS_CD_7",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "ICD9_DGNS_CD_8",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "PRF_PHYSN_NPI_1",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "PRF_PHYSN_NPI_2",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "PRF_PHYSN_NPI_3",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "PRF_PHYSN_NPI_4",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "PRF_PHYSN_NPI_5",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "PRF_PHYSN_NPI_6",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "PRF_PHYSN_NPI_7",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "PRF_PHYSN_NPI_8",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "PRF_PHYSN_NPI_9",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "PRF_PHYSN_NPI_10",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "PRF_PHYSN_NPI_11",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "PRF_PHYSN_NPI_12",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "PRF_PHYSN_NPI_13",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "TAX_NUM_1",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "TAX_NUM_2",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "TAX_NUM_3",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "TAX_NUM_4",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "TAX_NUM_5",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "TAX_NUM_6",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "TAX_NUM_7",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "TAX_NUM_8",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "TAX_NUM_9",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "TAX_NUM_10",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "TAX_NUM_11",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "TAX_NUM_12",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "TAX_NUM_13",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "HCPCS_CD_1",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "HCPCS_CD_2",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "HCPCS_CD_3",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "HCPCS_CD_4",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "HCPCS_CD_5",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "HCPCS_CD_6",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "HCPCS_CD_7",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "HCPCS_CD_8",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "HCPCS_CD_9",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "HCPCS_CD_10",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "HCPCS_CD_11",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "HCPCS_CD_12",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "HCPCS_CD_13",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_NCH_PMT_AMT_1",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_NCH_PMT_AMT_2",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_NCH_PMT_AMT_3",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_NCH_PMT_AMT_4",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_NCH_PMT_AMT_5",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_NCH_PMT_AMT_6",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_NCH_PMT_AMT_7",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_NCH_PMT_AMT_8",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_NCH_PMT_AMT_9",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_NCH_PMT_AMT_10",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_NCH_PMT_AMT_11",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_NCH_PMT_AMT_12",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_NCH_PMT_AMT_13",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PTB_DDCTBL_AMT_1",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PTB_DDCTBL_AMT_2",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PTB_DDCTBL_AMT_3",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PTB_DDCTBL_AMT_4",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PTB_DDCTBL_AMT_5",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PTB_DDCTBL_AMT_6",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PTB_DDCTBL_AMT_7",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PTB_DDCTBL_AMT_8",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PTB_DDCTBL_AMT_9",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PTB_DDCTBL_AMT_10",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PTB_DDCTBL_AMT_11",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PTB_DDCTBL_AMT_12",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PTB_DDCTBL_AMT_13",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PRMRY_PYR_PD_AMT_1",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PRMRY_PYR_PD_AMT_2",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PRMRY_PYR_PD_AMT_3",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PRMRY_PYR_PD_AMT_4",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PRMRY_PYR_PD_AMT_5",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PRMRY_PYR_PD_AMT_6",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PRMRY_PYR_PD_AMT_7",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PRMRY_PYR_PD_AMT_8",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PRMRY_PYR_PD_AMT_9",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PRMRY_PYR_PD_AMT_10",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PRMRY_PYR_PD_AMT_11",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PRMRY_PYR_PD_AMT_12",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_BENE_PRMRY_PYR_PD_AMT_13",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_COINSRNC_AMT_1",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_COINSRNC_AMT_2",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_COINSRNC_AMT_3",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_COINSRNC_AMT_4",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_COINSRNC_AMT_5",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_COINSRNC_AMT_6",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_COINSRNC_AMT_7",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_COINSRNC_AMT_8",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_COINSRNC_AMT_9",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_COINSRNC_AMT_10",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_COINSRNC_AMT_11",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_COINSRNC_AMT_12",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_COINSRNC_AMT_13",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_ALOWD_CHRG_AMT_1",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_ALOWD_CHRG_AMT_2",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_ALOWD_CHRG_AMT_3",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_ALOWD_CHRG_AMT_4",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_ALOWD_CHRG_AMT_5",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_ALOWD_CHRG_AMT_6",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_ALOWD_CHRG_AMT_7",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_ALOWD_CHRG_AMT_8",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_ALOWD_CHRG_AMT_9",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_ALOWD_CHRG_AMT_10",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_ALOWD_CHRG_AMT_11",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_ALOWD_CHRG_AMT_12",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_ALOWD_CHRG_AMT_13",
										"OriginDataTypeName": {
											"TypeName": "real",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "real"
											}
										}
									},
									{
										"Name": "LINE_PRCSG_IND_CD_1",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_PRCSG_IND_CD_2",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_PRCSG_IND_CD_3",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_PRCSG_IND_CD_4",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_PRCSG_IND_CD_5",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_PRCSG_IND_CD_6",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_PRCSG_IND_CD_7",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_PRCSG_IND_CD_8",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_PRCSG_IND_CD_9",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_PRCSG_IND_CD_10",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_PRCSG_IND_CD_11",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_PRCSG_IND_CD_12",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_PRCSG_IND_CD_13",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_ICD9_DGNS_CD_1",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_ICD9_DGNS_CD_2",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_ICD9_DGNS_CD_3",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_ICD9_DGNS_CD_4",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_ICD9_DGNS_CD_5",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_ICD9_DGNS_CD_6",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_ICD9_DGNS_CD_7",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_ICD9_DGNS_CD_8",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_ICD9_DGNS_CD_9",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_ICD9_DGNS_CD_10",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_ICD9_DGNS_CD_11",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_ICD9_DGNS_CD_12",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "LINE_ICD9_DGNS_CD_13",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://native@analyticsstoragejrs02.dfs.core.windows.net/carrierClaims/parquet",
										"FormatTypeSetToDatabaseDefault": false
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://native@analyticsstoragejrs02.dfs.core.windows.net/carrierClaims/parquet",
									"Properties": {
										"LinkedServiceName": "analyticsstoragejrs02",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "DESYNPUF_ID",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/jrssqlpool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus2"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sparkjrs3')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 40,
					"minNodeCount": 3
				},
				"nodeCount": 9,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "2.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus2"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/myspark')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 120
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus2"
		}
	]
}